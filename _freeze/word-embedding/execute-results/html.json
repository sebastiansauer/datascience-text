{
  "hash": "c512a97b426fdd192f69064b646d9886",
  "result": {
    "markdown": "# Word Embedding\n\n\n![Text als Datenbasis prädiktiver Modelle](img/text-mining-1476780_640.png){width=10%}\nBild von <a href=\"https://pixabay.com/de/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780\">mcmurryjulie</a> auf <a href=\"https://pixabay.com/de//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780\">Pixabay</a>\n\n\n\n## Vorab\n\n\n### Lernziele\n\n\n- Die vorgestellten Techniken des Textminings mit R anwenden können\n\n\n\n### Vorbereitung\n\n- Arbeiten Sie @smltar, [Kap. 5](https://smltar.com/embeddings.html) durch.\n\n\n\n\n\n\n### Benötigte R-Pakete\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-1_dc2c1ff055e9cfd8de10590c9cc611d0'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(slider)  # slide\nlibrary(widyr)  # pairwise_pmi\nlibrary(furrr)  # mehrere Kerne gleichzeitig nutzen\nlibrary(textdata)  # Worteinbettungen, vorgekocht\n```\n:::\n\n\n\n## Daten\n\n\n### Complaints-Datensatz\n\nDer Datensatz `complaints` stammt aus [dieser Quelle](https://www.consumerfinance.gov/data-research/consumer-complaints/).\n\nDen Datensatz `complaints` kann man [hier](https://github.com/EmilHvitfeldt/smltar/raw/master/data/complaints.csv.gz) herunterladen. Im Buch ist die Webseite nicht (direkt?) angegeben. Die Datei ist mit `gz` gepackt; `read_csv` sollte das automatisch entpacken. Achtung: Die Datei ist recht groß.\n\n\n::: {.cell hash='word-embedding_cache/html/read-complaints-data_c409b292bb4630e8366ac1dd05232d84'}\n\n```{.r .cell-code}\nd_path <- \"https://github.com/EmilHvitfeldt/smltar/raw/master/data/complaints.csv.gz\"\ncomplaints <- read_csv(d_path)\n```\n:::\n\n\nGeschickter als jedes Mal die Datei herunterzuladen, ist es, sie einmal herunterzuladen, und dann lokal zu speichern,\netwa im Unterordner `data` des RStudio-Projektordners.\n\n\nNach dem Importieren wird der Datensatz in eine Tidy-Form gebracht (mit `unnest_tokens`) und dann verschachtelt, mit `nest`.\n\n\n### Complaints verkürzt und geschachtelt\n\nUm ein Herumprobieren zu erleichtern, ist hier der Datensatz `complaints` in zwei verkürzten Formen bereitgestellt:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-2_087c90585315ec3d67bf919c950f1e97'}\n\n```{.r .cell-code}\nnested_words2_path <- \"https://github.com/sebastiansauer/datascience-text/raw/main/data/nested_words2.rds\"\nnested_words3_path <- \"https://github.com/sebastiansauer/datascience-text/raw/main/data/nested_words3.rds\"\n```\n:::\n\n\n\n`nested_words2` enthält die ersten 10% des Datensatz `nested_words`und ist gut 4 MB groß (mit `gz` gezippt); er besteht aus ca. 11 Tausend Beschwerden.\n`nested_words3` enthält nur die ersten 10 Beschwerden, was ihn gut zum Handhaben macht.\n\nBeide sind verschachtelt und aus `tidy_complaints` (s. [Kap. 5.1](https://smltar.com/embeddings.html#motivatingsparse)) hervorgegangen.\n\n\n\n::: {.cell hash='word-embedding_cache/html/read-rds-nested-data_c88ffa3ec00426f49ded9c22547b6571'}\n\n```{.r .cell-code}\nnested_words3 <- read_rds(nested_words3_path)\n```\n:::\n\n\n\nDas sieht dann so aus:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-3_dbe03c719865da9d7f16e723430f640e'}\n\n```{.r .cell-code}\nnested_words3 %>% \n  head(3)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| complaint_id|words|\n|------------:||\n|      3384392|systems   , inc       , is        , trying    , to        , collect   , a         , debt      , that      , is        , not       , mine      , not       , owed      , and       , is        , inaccurate|\n|      3417821|i            , would        , like         , to           , request      , the          , of           , the          , following    , items        , from         , my           , credit       , report       , which        , are          , the          , result       , of           , my           , victim       , to           , identity     , theft        , this         , information  , does         , not          , to           , transactions , that         , i            , have         , made         , accounts     , that         , i            , have         , opened       , as           , the          , attached     , supporting   , documentation, can          , as           , such         , it           , should       , be           , blocked      , from         , on           , my           , credit       , report       , pursuant     , to           , section      , of           , the          , fair         , credit       , reporting    , act |\n|      3433198|over      , the       , past      , 2         , weeks     , i         , have      , been      , receiving , amounts   , of        , telephone , calls     , from      , the       , company   , listed    , in        , this      , complaint , the       , calls     , between   , xxxx      , xxxx      , and       , xxxx      , xxxx      , to        , my        , cell      , and       , at        , my        , job       , the       , company   , does      , not       , have      , the       , right     , to        , me        , at        , work      , and       , i         , want      , this      , to        , stop      , it        , is        , extremely , to        , be        , told      , 5         , times     , a         , day       , that      , i         , have      , a         , call      , from      , this      , collection, agency    , while     , at        , work                                                                                    |\n\n</div>\n:::\n:::\n\nWerfen wir einen Blick in den TExt der ersten Beschwerde des Datensatzes mit der ID `nested_words3_path$complaint_id[1]`.\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-4_9dda5578acb7d827f65585ff69641c20'}\n\n```{.r .cell-code}\nbeschwerde1_text <- nested_words3$words[[1]]\n```\n:::\n\n\nDas ist ein Tibble mit einer Spalte und 17 Wörtern; \nda wir schon auf Unigramme aufgeteilt haben, ist jedes Wort ein Element des Vektors `word`: \n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-5_ffe87d60bc09da5ee534bb388719365b'}\n\n```{.r .cell-code}\nbeschwerde1_text %>% \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|word    |\n|:-------|\n|systems |\n|inc     |\n|is      |\n|trying  |\n|to      |\n|collect |\n\n</div>\n:::\n:::\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-6_a641385020f0c02b44453c8282431c4c'}\n\n```{.r .cell-code}\nbeschwerde1_text$word\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"systems\"    \"inc\"        \"is\"         \"trying\"     \"to\"        \n [6] \"collect\"    \"a\"          \"debt\"       \"that\"       \"is\"        \n[11] \"not\"        \"mine\"       \"not\"        \"owed\"       \"and\"       \n[16] \"is\"         \"inaccurate\"\n```\n:::\n:::\n\n\n\n\n## Kommentare und Hilfestellungen\n\n\n\n\n\n\n### PMI berechnen\n\n\nRufen Sie sich die Definition der PMI ins Gedächtnis, s. @eq-pmi.\n\nMit R kann man die PMI z.B. so berechnen, s. `? pairwise_pmi` aus dem Paket `{widyr}`.\n\n\nZum Paket `widyr` von Robinson und Silge:\n\n>   This package wraps the pattern of un-tidying data into a wide matrix, performing some processing, then turning it back into a tidy form. This is useful for several mathematical operations such as co-occurrence counts, correlations, or clustering that are best done on a wide matrix.\n\n\n[Quelle](https://juliasilge.github.io/widyr/)\n\nErzeugen wir uns Dummy-Daten:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-7_7cce10395cc20cd9882e2aca7479ac34'}\n\n```{.r .cell-code}\ndat <- tibble(feature = rep(1:5, each = 2),\n              item = c(\"a\", \"b\",\n                       \"a\", \"c\",\n                       \"a\", \"c\",\n                       \"b\", \"e\",\n                       \"b\", \"f\"))\n\ndat\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| feature|item |\n|-------:|:----|\n|       1|a    |\n|       1|b    |\n|       2|a    |\n|       2|c    |\n|       3|a    |\n|       3|c    |\n|       4|b    |\n|       4|e    |\n|       5|b    |\n|       5|f    |\n\n</div>\n:::\n:::\n\n\nAus der Hilfe der Funktion:\n\n>   Find pointwise mutual information of pairs of items in a column, based on a \"feature\" column that links them together. This is an example of the spread-operate-retidy pattern.\n\nDie Argumente der Funktion sind:\n\n*item*\n\nItem to compare; will end up in item1 and item2 columns\n\n*feature*\t\n\nColumn describing the feature that links one item to others\n\n\nManche Berechnungen (Operationen) lassen sich vielleicht leichter nicht in der Tidy-Form (Langform), sondern in der \"breiten\" oder Matrixform ausführen.\nWandeln wir mal `dat` von der Langform in die Breitform um:\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-8_607b663e3c2b33966516fd3beb451cf0'}\n\n```{.r .cell-code}\ntable(dat$item, dat$feature)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n    1 2 3 4 5\n  a 1 1 1 0 0\n  b 1 0 0 1 1\n  c 0 1 1 0 0\n  e 0 0 0 1 0\n  f 0 0 0 0 1\n```\n:::\n:::\n\n\nSilge und Robinson verdeutlichen das Prinzip von `widyr` so, s. @fig-widyr.\n\n\n![Die Funktionsweise von widyr, Quelle: Silge und Robinson](img/widyr.jpeg){#fig-widyr}\n\n(Vgl. auch die [Erklärung hier](https://bookdown.org/Maxine/tidy-text-mining/counting-and-correlating-pairs-of-words-with-widyr.html).)\n\nBauen wir das mal von Hand nach.\n\n\n\nRandwahrscheinlichkeiten von `a` und `c` sowie deren Produkt, `p_a_p_c`:\n\n\n::: {.cell hash='word-embedding_cache/html/p_a_und_p_c_cb9d1c4dd674d63725e290cb7ecfe130'}\n\n```{.r .cell-code}\np_a <- 3/5\np_c <- 2/5\n\np_a_p_c <- p_a * p_c\np_a_p_c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.24\n```\n:::\n:::\n\n\n\nGemeinsame Wahrscheinlichkeit von `a` und `c`:\n\n\n::: {.cell hash='word-embedding_cache/html/p_ac_9d3e2000f4997d5a67ea625b29577fc2'}\n\n```{.r .cell-code}\np_ac <- 2/5\n```\n:::\n\n\n\nPMI von Hand berechnet:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-9_7c8745ec7a9a622ab7a4941a49c34a48'}\n\n```{.r .cell-code}\nlog(p_ac/p_a_p_c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5108256\n```\n:::\n:::\n\n\nMan beachte, dass hier als Basis $e$, der natürliche Logarithmus, verwendet wurde (nicht 2).\n\nJetzt berechnen wir die PMI mit `pairwise_pmi`.\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-10_e4a640cbc050b1bc4071447ebe44518d'}\n\n```{.r .cell-code}\npairwise_pmi(dat, item = item, feature = feature)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1 |item2 |        pmi|\n|:-----|:-----|----------:|\n|b     |a     | -0.5877867|\n|c     |a     |  0.5108256|\n|a     |b     | -0.5877867|\n|e     |b     |  0.5108256|\n|f     |b     |  0.5108256|\n|a     |c     |  0.5108256|\n|b     |e     |  0.5108256|\n|b     |f     |  0.5108256|\n\n</div>\n:::\n:::\n\n\nWie man sieht, entspricht unserer Berechnung von Hand der Berechnung mit `pairwise_pmi`. \n\n\n\n\n\n### Sliding\n\nSliding ist ein interessantes Konzept, aber man braucht vielleicht etwas Zeit, \num sein Hirn um das Konzept zu wickeln...\n\nHier eine Illustration:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-11_2017236132ec0ea8947a94a55053c119'}\n\n```{.r .cell-code}\ntxt_vec <- \"Das ist ein Test, von dem nicht viel zu erwarten ist\"\n\nslider::slide(txt_vec, ~ .x, .before = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Das ist ein Test, von dem nicht viel zu erwarten ist\"\n```\n:::\n:::\n\n\n\nOh, da passiert nichts?! Kaputt? Nein, wir müssen jedes Wort als *ein Element* des Vektors auffassen.\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-12_3145ef06f5fc92d1c9c5c7d478a246a2'}\n\n```{.r .cell-code}\ntxt_df <-\n  tibble(txt = txt_vec) %>% \n  unnest_tokens(input = txt, output = word)\n\nhead(txt_df)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|word |\n|:----|\n|das  |\n|ist  |\n|ein  |\n|test |\n|von  |\n|dem  |\n\n</div>\n:::\n:::\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-13_e93b9971e645e3044bc9dd12448aede0'}\n\n```{.r .cell-code}\nslider::slide(txt_df$word, ~ .x, .before = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"das\"\n\n[[2]]\n[1] \"das\" \"ist\"\n\n[[3]]\n[1] \"das\" \"ist\" \"ein\"\n\n[[4]]\n[1] \"ist\"  \"ein\"  \"test\"\n\n[[5]]\n[1] \"ein\"  \"test\" \"von\" \n\n[[6]]\n[1] \"test\" \"von\"  \"dem\" \n\n[[7]]\n[1] \"von\"   \"dem\"   \"nicht\"\n\n[[8]]\n[1] \"dem\"   \"nicht\" \"viel\" \n\n[[9]]\n[1] \"nicht\" \"viel\"  \"zu\"   \n\n[[10]]\n[1] \"viel\"     \"zu\"       \"erwarten\"\n\n[[11]]\n[1] \"zu\"       \"erwarten\" \"ist\"     \n```\n:::\n:::\n\n\n\nAh!\n\n\nDas Aufteilen in einzelne Wörter pro Element des Vektors könnte man auch so erreichen:\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-14_af356045369c209d429f7105fe532c78'}\n\n```{.r .cell-code}\ntxt_vec2 <- str_split(txt_vec, pattern = boundary(\"word\")) %>% \n  simplify() \n\nslide(txt_vec2, .f = ~.x, .before = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Das\"\n\n[[2]]\n[1] \"Das\" \"ist\"\n\n[[3]]\n[1] \"Das\" \"ist\" \"ein\"\n\n[[4]]\n[1] \"ist\"  \"ein\"  \"Test\"\n\n[[5]]\n[1] \"ein\"  \"Test\" \"von\" \n\n[[6]]\n[1] \"Test\" \"von\"  \"dem\" \n\n[[7]]\n[1] \"von\"   \"dem\"   \"nicht\"\n\n[[8]]\n[1] \"dem\"   \"nicht\" \"viel\" \n\n[[9]]\n[1] \"nicht\" \"viel\"  \"zu\"   \n\n[[10]]\n[1] \"viel\"     \"zu\"       \"erwarten\"\n\n[[11]]\n[1] \"zu\"       \"erwarten\" \"ist\"     \n```\n:::\n:::\n\n\n\n\n\nIn unserem Beispiel mit den Beschwerden:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-15_99fb5985d1204c80a0a80704f2783565'}\n\n```{.r .cell-code}\nslide(beschwerde1_text$word,  ~.x, .before = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"systems\"\n\n[[2]]\n[1] \"systems\" \"inc\"    \n\n[[3]]\n[1] \"systems\" \"inc\"     \"is\"     \n\n[[4]]\n[1] \"inc\"    \"is\"     \"trying\"\n\n[[5]]\n[1] \"is\"     \"trying\" \"to\"    \n\n[[6]]\n[1] \"trying\"  \"to\"      \"collect\"\n\n[[7]]\n[1] \"to\"      \"collect\" \"a\"      \n\n[[8]]\n[1] \"collect\" \"a\"       \"debt\"   \n\n[[9]]\n[1] \"a\"    \"debt\" \"that\"\n\n[[10]]\n[1] \"debt\" \"that\" \"is\"  \n\n[[11]]\n[1] \"that\" \"is\"   \"not\" \n\n[[12]]\n[1] \"is\"   \"not\"  \"mine\"\n\n[[13]]\n[1] \"not\"  \"mine\" \"not\" \n\n[[14]]\n[1] \"mine\" \"not\"  \"owed\"\n\n[[15]]\n[1] \"not\"  \"owed\" \"and\" \n\n[[16]]\n[1] \"owed\" \"and\"  \"is\"  \n\n[[17]]\n[1] \"and\"        \"is\"         \"inaccurate\"\n```\n:::\n:::\n\n\n\n\n### Funktion `slide_windows`\n\n\nDie Funktion `slide_windows` im [Kapitel 5.2](https://smltar.com/embeddings.html#understand-word-embeddings-by-finding-them-yourself) ist recht kompliziert. In solchen Fällen ist es hilfreich, sich jeden Schritt einzeln ausführen zu lassen. Sind die Schritte in einer Funktion zusammengefasst, kann man mit `debug(fun)` sich die Schritte innerhalb der Funktion einzeln ausführen lassen.\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-16_6914e18f121a517840897675ea87438a'}\n\n```{.r .cell-code}\nslide_windows <- function(tbl, window_size) {\n  skipgrams <- slider::slide(\n    tbl, \n    ~.x, \n    .after = window_size - 1, \n    .step = 1, \n    .complete = TRUE\n  )\n  \n  safe_mutate <- safely(mutate)\n  \n  out <- map2(skipgrams,\n              1:length(skipgrams),\n              ~ safe_mutate(.x, window_id = .y))\n  \n  out %>%\n    transpose() %>%\n    pluck(\"result\") %>%\n    compact() %>%\n    bind_rows()\n}\n```\n:::\n\n\n\n\nErschwerend kommt eine große Datenmenge und eine lange Berechnungszeit dazu, was das Debuggen (Nachvollziehen und Durchdenken) der Schritte zusätzlich erschwert.\nIn solchen Fällen hilft die goldende Regel: Mach es dir so einfach wie möglich (aber nicht einfacher).\nWir nutzen also den stark verkleinerten Datensatz `nested_words3`, den wir oben importiert haben.\n\n\nHier ist der Syntax-Auszug:\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-17_ace38d9959c4dac2b956554feaee86f6'}\n\n```{.r .cell-code}\nlibrary(widyr)\nlibrary(furrr)\n\nplan(multisession)  ## for parallel processing\n\n#debug(slide_windows)  # um sich die Schritte in `slide_windows` einzeln anzuschauen.\n\ntidy_pmi <- nested_words3 %>%  # <--- Kleiner Datensatz!\n  mutate(words = future_map(words, slide_windows, 4L)) %>%\n  unnest(words) %>%\n  unite(window_id, complaint_id, window_id) %>%\n  pairwise_pmi(word, window_id)\n\ntidy_pmi %>% \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1   |item2   |      pmi|\n|:-------|:-------|--------:|\n|inc     |systems | 5.728498|\n|is      |systems | 2.838126|\n|trying  |systems | 5.035351|\n|systems |inc     | 5.728498|\n|is      |inc     | 2.838126|\n|trying  |inc     | 5.035351|\n\n</div>\n:::\n:::\n\n\n\n\n### SVD\n\n\nDie *Singulärwertzerlegung* (singular value decomposition, SVD) ist ein Verfahren zur Verringerung der Spaltenzahl (Dimension), vergleichbar zur Faktorenanalyse.\nZur Anschaulichkeit - und ohne substanziellen Hintergrund - sei folgendes Beispiel genannt:\nDie Verben \"gehen\", \"rennen\", \"laufen\", \"schwimmen\", \"fahren\", \"rutschen\" könnten zu einer gemeinsamen Dimension, etwa \"fortbewegen\" reduziert werden.\nJedes einzelne der eingehenden Verben erhält eine Zahl von 0 bis 1, das die konzeptionelle Nähe des Verbs\nzur \"dahinterliegenden\" Dimension (fortbewegen) quantifiziert; \ndie Zahl nennt man auch die \"Ladung\" des Items (Worts) auf die Dimension.\nSagen wir, wir identifizieren 10 Dimensionen.\nMan erhält dann für jedes unique Wort im Corpus einen Vektor mit den Ladungen auf die Dimensionsen.\nIm genannten Beispiel wäre es ein 10-stelliger Vektor.\nSo wie ein 3-stelliger Vektor die Position einer Biene im Raum beschreibt^[Man könnte ergänzen: plus eine 4. Dimension für Zeit, plus noch ein paar Weitere für die Beschleunigung in verschiedene Richtungen...],\nbeschreibt hier unser 10-stelliger Vektor die \"Position\" eines Worts in unserem *Einbettungsvektor*.\n\n\nDie Syntax dazu ist dieses Mal einfach:\n\n\n\n\n::: {.cell hash='word-embedding_cache/html/widely-svd_0d6a1d676a38c10b6e7d5d212db344ba'}\n\n```{.r .cell-code}\ntidy_word_vectors <- \n  tidy_pmi %>%\n  widely_svd(\n    item1, item2, pmi,\n    nv = 100\n  )\n\ntidy_word_vectors %>% \n  (head)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1   | dimension|      value|\n|:-------|---------:|----------:|\n|inc     |         1| -0.0378963|\n|is      |         1| -0.1132069|\n|trying  |         1| -0.0512764|\n|systems |         1| -0.0333332|\n|to      |         1| -0.1203434|\n|collect |         1| -0.0554211|\n\n</div>\n:::\n:::\n\n\n\nMit `nv = 100` haben wir die Anzahl (`n`) der Dimensionen (Variablen, `v`) auf 100 bestimmt.\n\n\n\n### Wortähnlichkeit\n\n\nJetzt, da wir mit der SVD jedes Wort in einem Koordinatensystem verortet haben, können wir die Abstände der Wörter im Koordinatensystem bestimmen.\nDas geht mit Hilfe des alten Pythagoras, s. @fig-euklid-distance.\nDer Abstand, den man mit Hilfe des Satz des Pythagoras berechnet, nennt man auch *euklidische Distanz*.\n\n\n![Euklidische Distanz in 2D, Quelle: Wikipedia, CC BY4.0, Kmhkmh](img/euklid-distance.png){#fig-euklid-distance width=50%}\n\nOkay, wir sind in einem Raum mit vielen Dimensionen, was mein Hirn nicht mitmacht, [aber der Algebra ist das egal](https://mathworld.wolfram.com/Distance.html). \nPythagoras' Satz lässt sich genauso anwenden, wenn es mehr als Dimensionen sind.\n\n\n\n\n\nDie Autoren basteln sich selber eine Funktion in [Kap. 5.3](https://smltar.com/embeddings.html#exploring-cfpb-word-embeddings),\naber der Einfachheit halber nehme ich (erstmal) die entsprechende Funktion aus `widyr`:\n\n\n\n::: {.cell hash='word-embedding_cache/html/pairwise-dist_177476962fa68331a32177a2dd2f332d'}\n\n```{.r .cell-code}\nword_neighbors <- \ntidy_word_vectors %>% \n  pairwise_dist(item1, dimension, value)\n\nword_neighbors %>% \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1   |item2 |  distance|\n|:-------|:-----|---------:|\n|is      |inc   | 1.0220141|\n|trying  |inc   | 0.9332851|\n|systems |inc   | 0.4161215|\n|to      |inc   | 1.0913872|\n|collect |inc   | 0.5221759|\n|a       |inc   | 1.0309566|\n\n</div>\n:::\n:::\n\n\n\nWas sind die Nachbarn von \"inaccurate\"?\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-18_b7920643190537b203305de1df9f3e72'}\n\n```{.r .cell-code}\nword_neighbors %>% \n  filter(item1 == \"inaccurate\") %>% \n  arrange(distance) %>% \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1      |item2 |  distance|\n|:----------|:-----|---------:|\n|inaccurate |mine  | 0.5248868|\n|inaccurate |score | 0.5310116|\n|inaccurate |oh    | 0.5400913|\n|inaccurate |ny    | 0.5400913|\n|inaccurate |dob   | 0.5801281|\n|inaccurate |cell  | 0.6093670|\n\n</div>\n:::\n:::\n\n\nHier ist die Datenmenge zu klein, um vernünftige Schlüsse zu ziehen.\nAber \"incorrectly\", \"correct\", \"balance\" sind wohl plausible Nachbarn von \"inaccurate\".\n\n\n\n\n\n### Word-Embeddings vorgekocht: Glove6B\n\nIn [Kap. 5.4](https://smltar.com/embeddings.html#glove) schreiben die Autoren:\n\n>   If your data set is too small, you typically cannot train reliable word embeddings.\n\nEin paar Millionen Wörter sollte der Corpus schon enthalten, so die Autoren.\nDa solche \"Worteinbettungen\" (word embedings) aufwändig zu erstellen sind, \nkann man fertige, \"vorgekochte\" Produkte nutzen.\n\nGlove6B wurde anhand von Wikipedia und anderen Datenquellen erstellt [@pennington_glove_2014].\n\n:::callout-note\nDie zugehörigen Daten sind recht groß; für [`glove6b`](https://nlp.stanford.edu/projects/glove/) [@pennington_glove_2014] ist fast ein Gigabyte fällig.\nSie sollten sich die Daten in einem ruhigen Moment (mit stabiler Internetverbindung) herunterladen und in einem Verzeichnis meiner Wahl abgespeichert (`datasets`).\nDa bei mir Download abbrach, als ich `embedding_glove6b(dimensions = 100)` aufrief, habe ich die Daten manuell heruntergeladen, s.u.\n:::\n\n\n\n\n::: {.cell hash='word-embedding_cache/html/load-glove_04ef018bb908c2cd22a5a09c67ce0076'}\n\n```{.r .cell-code}\nglove6b <- embedding_glove6b(dir = \"~/datasets\", dimensions = 10, manual_download = TRUE)\nglove6b %>% \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|token |        d1|        d2|       d3|        d4|        d5|       d6|        d7|        d8|       d9|       d10|       d11|      d12|      d13|      d14|      d15|      d16|     d17|       d18|      d19|      d20|      d21|       d22|     d23|       d24|        d25|       d26|       d27|      d28|       d29|       d30|       d31|      d32|      d33|       d34|      d35|       d36|     d37|     d38|       d39|       d40|      d41|      d42|       d43|      d44|       d45|       d46|      d47|      d48|      d49|      d50|        d51|      d52|      d53|     d54|       d55|     d56|       d57|       d58|    d59|     d60|      d61|     d62|       d63|     d64|     d65|       d66|       d67|       d68|       d69|       d70|       d71|      d72|       d73|       d74|       d75|        d76|       d77|       d78|      d79|       d80|     d81|       d82|      d83|     d84|     d85|      d86|       d87|       d88|       d89|      d90|       d91|       d92|       d93|      d94|      d95|      d96|       d97|      d98|     d99|      d100|\n|:-----|---------:|---------:|--------:|---------:|---------:|--------:|---------:|---------:|--------:|---------:|---------:|--------:|--------:|--------:|--------:|--------:|-------:|---------:|--------:|--------:|--------:|---------:|-------:|---------:|----------:|---------:|---------:|--------:|---------:|---------:|---------:|--------:|--------:|---------:|--------:|---------:|-------:|-------:|---------:|---------:|--------:|--------:|---------:|--------:|---------:|---------:|--------:|--------:|--------:|--------:|----------:|--------:|--------:|-------:|---------:|-------:|---------:|---------:|------:|-------:|--------:|-------:|---------:|-------:|-------:|---------:|---------:|---------:|---------:|---------:|---------:|--------:|---------:|---------:|---------:|----------:|---------:|---------:|--------:|---------:|-------:|---------:|--------:|-------:|-------:|--------:|---------:|---------:|---------:|--------:|---------:|---------:|---------:|--------:|--------:|--------:|---------:|--------:|-------:|---------:|\n|the   | -0.038194| -0.244870| 0.728120| -0.399610|  0.083172| 0.043953| -0.391410|  0.334400| -0.57545|  0.087459|  0.287870| -0.06731|  0.30906| -0.26384| -0.13231| -0.20757| 0.33395| -0.338480| -0.31743| -0.48336| 0.146400| -0.373040| 0.34577|  0.052041|  0.4494600| -0.469710|  0.026280| -0.54155| -0.155180| -0.141070| -0.039722|  0.28277|  0.14393|  0.234640| -0.31021|  0.086173| 0.20397| 0.52624|  0.171640| -0.082378| -0.71787| -0.41531|  0.203350| -0.12763|  0.413670|  0.551870| 0.579080| -0.33477| -0.36559| -0.54857| -0.0628920|  0.26584|  0.30205| 0.99775| -0.804810| -3.0243|  0.012540| -0.369420| 2.2167| 0.72201| -0.24978| 0.92136|  0.034514| 0.46745| 1.10790| -0.193580| -0.074575|  0.233530| -0.052062| -0.220440|  0.057162| -0.15806| -0.307980| -0.416250|  0.379720|  0.1500600| -0.532120| -0.205500| -1.25260|  0.071624| 0.70565|  0.497440| -0.42063| 0.26148| -1.5380| -0.30223| -0.073438| -0.283120|  0.371040| -0.25217|  0.016215| -0.017099| -0.389840|  0.87424| -0.72569| -0.51058| -0.520280| -0.14590| 0.82780|  0.270620|\n|,     | -0.107670|  0.110530| 0.598120| -0.543610|  0.673960| 0.106630|  0.038867|  0.354810|  0.06351| -0.094189|  0.157860| -0.81665|  0.14172|  0.21939|  0.58505| -0.52158| 0.22783| -0.166420| -0.68228|  0.35870| 0.425680|  0.190210| 0.91963|  0.575550|  0.4618500|  0.423630| -0.095399| -0.42749| -0.165670| -0.056842| -0.295950|  0.26037| -0.26606| -0.070404| -0.27662|  0.158210| 0.69825| 0.43081|  0.279520| -0.454370| -0.33801| -0.58184|  0.223640| -0.57780| -0.268620| -0.204250| 0.563940| -0.58524| -0.14365| -0.64218|  0.0054697| -0.35248|  0.16162| 1.17960| -0.476740| -2.7553| -0.132100| -0.047729| 1.0655| 1.10340| -0.22080| 0.18669|  0.131770| 0.15117| 0.71310| -0.352150|  0.913480|  0.617830|  0.709920|  0.239550| -0.145710| -0.37859| -0.045959| -0.473680|  0.238500|  0.2053600| -0.189960|  0.325070| -1.11120| -0.363410| 0.98679| -0.084776| -0.54008| 0.11726| -1.0194| -0.24424|  0.127710|  0.013884|  0.080374| -0.35414|  0.349510| -0.722600|  0.375490|  0.44410| -0.99059|  0.61214| -0.351110| -0.83155| 0.45293|  0.082577|\n|.     | -0.339790|  0.209410| 0.463480| -0.647920| -0.383770| 0.038034|  0.171270|  0.159780|  0.46619| -0.019169|  0.414790| -0.34349|  0.26872|  0.04464|  0.42131| -0.41032| 0.15459|  0.022239| -0.64653|  0.25256| 0.043136| -0.194450| 0.46516|  0.456510|  0.6858800|  0.091295|  0.218750| -0.70351|  0.167850| -0.350790| -0.126340|  0.66384| -0.25820|  0.036542| -0.13605|  0.402530| 0.14289| 0.38132| -0.122830| -0.458860| -0.25282| -0.30432| -0.112150| -0.26182| -0.224820| -0.445540| 0.299100| -0.85612| -0.14503| -0.49086|  0.0082973| -0.17491|  0.27524| 1.44010| -0.212390| -2.8435| -0.279580| -0.457220| 1.6386| 0.78808| -0.55262| 0.65000|  0.086426| 0.39012| 1.06320| -0.353790|  0.483280|  0.346000|  0.841740|  0.098707| -0.242130| -0.27053|  0.045287| -0.401470|  0.113950|  0.0062226|  0.036673|  0.018518| -1.02130| -0.208060| 0.64072| -0.068763| -0.58635| 0.33476| -1.1432| -0.11480| -0.250910| -0.459070| -0.096819| -0.17946| -0.063351| -0.674120| -0.068895|  0.53604| -0.87773|  0.31802| -0.392420| -0.23394| 0.47298| -0.028803|\n|of    | -0.152900| -0.242790| 0.898370|  0.169960|  0.535160| 0.487840| -0.588260| -0.179820| -1.35810|  0.425410|  0.153770|  0.24215|  0.13474|  0.41193|  0.67043| -0.56418| 0.42985| -0.012183| -0.11677|  0.31781| 0.054177| -0.054273| 0.35516| -0.302410|  0.3143400| -0.338460|  0.717150| -0.26855| -0.158370| -0.474670|  0.051581| -0.33252|  0.15003| -0.129900| -0.54617| -0.378430| 0.64261| 0.82187| -0.080006|  0.078479| -0.96976| -0.57741|  0.564910| -0.39873| -0.057099|  0.197430| 0.065706| -0.48092| -0.20125| -0.40834|  0.3945600| -0.02642| -0.11838| 1.01200| -0.531710| -2.7474| -0.042981| -0.748490| 1.7574| 0.59085|  0.04885| 0.78267|  0.384970| 0.42097| 0.67882|  0.103370|  0.632800| -0.026595|  0.586470| -0.443320|  0.330570| -0.12022| -0.556450|  0.073611|  0.209150|  0.4339500| -0.012761|  0.089874| -1.79910|  0.084808| 0.77112|  0.631050| -0.90685| 0.60326| -1.7515|  0.18596| -0.506870| -0.702030|  0.665780| -0.81304|  0.187120| -0.018488| -0.267570|  0.72700| -0.59363| -0.34839| -0.560940| -0.59100| 1.00390|  0.206640|\n|to    | -0.189700|  0.050024| 0.190840| -0.049184| -0.089737| 0.210060| -0.549520|  0.098377| -0.20135|  0.342410| -0.092677|  0.16100| -0.13268| -0.28160|  0.18737| -0.42959| 0.96039|  0.139720| -1.07810|  0.40518| 0.505390| -0.550640| 0.48440|  0.380440| -0.0029055| -0.349420| -0.099696| -0.78368|  1.036300| -0.231400| -0.471210|  0.57126| -0.21454|  0.359580| -0.48319|  1.087500| 0.28524| 0.12447| -0.039248| -0.076732| -0.76343| -0.32409| -0.574900| -1.08930| -0.418110|  0.451200| 0.121120| -0.51367| -0.13349| -1.13780| -0.2876800|  0.16774|  0.55804| 1.53870|  0.018859| -2.9721| -0.242160| -0.924950| 2.1992| 0.28234| -0.34780| 0.51621| -0.433870| 0.36852| 0.74573|  0.072102|  0.279310|  0.925690| -0.050336| -0.858560| -0.135800| -0.92551| -0.339910| -1.039400| -0.067203| -0.2137900| -0.476900|  0.213770| -0.84008|  0.052536| 0.59298|  0.296040| -0.67644| 0.13916| -1.5504| -0.20765|  0.722200|  0.520560| -0.076221| -0.15194| -0.131340|  0.058617| -0.318690| -0.61419| -0.62393| -0.41548| -0.038175| -0.39804| 0.47647| -0.159830|\n|and   | -0.071953|  0.231270| 0.023731| -0.506380|  0.339230| 0.195900| -0.329430|  0.183640| -0.18057|  0.289630|  0.204480| -0.54960|  0.27399|  0.58327|  0.20468| -0.49228| 0.19974| -0.070237| -0.88049|  0.29485| 0.140710| -0.100900| 0.99449|  0.369730|  0.4455400|  0.289980| -0.137600| -0.56365| -0.029365| -0.412200| -0.252690|  0.63181| -0.44767|  0.243630| -0.10813|  0.251640| 0.46967| 0.37550| -0.236130| -0.141290| -0.44537| -0.65737| -0.042421| -0.28636| -0.288110|  0.063766| 0.202810| -0.53542|  0.41307| -0.59722| -0.3861400|  0.19389| -0.17809| 1.66180| -0.011819| -2.3737|  0.058427| -0.269800| 1.2823| 0.81925| -0.22322| 0.72932| -0.053211| 0.43507| 0.85011| -0.429350|  0.926640|  0.390510|  1.058500| -0.245610| -0.182650| -0.53280|  0.059518| -0.660190|  0.189910|  0.2883600| -0.243400|  0.527840| -0.65762| -0.140810| 1.04910|  0.513400| -0.23816| 0.69895| -1.4813| -0.24870| -0.179360| -0.059137| -0.080560| -0.48782|  0.014487| -0.625900| -0.323670|  0.41862| -1.08070|  0.46742| -0.499310| -0.71895| 0.86894|  0.195390|\n\n</div>\n:::\n:::\n\n\nIn eine Tidyform bringen:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-19_379fb7e700d7ded163f4502135a26a3a'}\n\n```{.r .cell-code}\ntidy_glove <- \n  glove6b %>%\n  pivot_longer(contains(\"d\"),\n               names_to = \"dimension\") %>%\n  rename(item1 = token)\n\nhead(tidy_glove)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1 |dimension |     value|\n|:-----|:---------|---------:|\n|the   |d1        | -0.038194|\n|the   |d2        | -0.244870|\n|the   |d3        |  0.728120|\n|the   |d4        | -0.399610|\n|the   |d5        |  0.083172|\n|the   |d6        |  0.043953|\n\n</div>\n:::\n:::\n\n\nGanz schön groß: \n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-20_a7a703a0e5261812024c2c35b704d05e'}\n\n```{.r .cell-code}\nobject.size(tidy_glove)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n983837536 bytes\n```\n:::\n:::\n\n\nIn Megabyte^[$1024 \\cdot 1024$ Byte, und $1024 =2^10$, daher $2^{10} \\cdot 2^{10} = 2^{20}$]\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-21_fe603a142b65ae107ff3d6c189c26851'}\n\n```{.r .cell-code}\nobject.size(tidy_glove) / 2^20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n938.3 bytes\n```\n:::\n:::\n\n\nEinfacher und genauer geht es so:\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-22_eaf88443e962e3f37405f73f0235953e'}\n\n```{.r .cell-code}\npryr::object_size(tidy_glove)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n983.83 MB\n```\n:::\n:::\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-23_14f5b8da962e83a4d5c1dee8d0524da9'}\n\n```{.r .cell-code}\npryr::mem_used()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.48 GB\n```\n:::\n:::\n\n\n\n\nUm Speicher zu sparen, könnte man `glove6b` wieder direkt löschen, wenn man nur mit der Tidyform weiterarbeitet.\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-24_6b0b502b9632516cdd90a3af160cee0d'}\n\n```{.r .cell-code}\nrm(glove6b)\n```\n:::\n\n\n\n\nJetzt können wir wieder nach Nachbarn fragen, im euklidischen Sinne, wie oben.\nProbieren wir aus, welche Wörter nah zu \"inaccurate\" stehen.\n\n\n:::callout-note\nWie wir oben gesehen haben, ist der Datensatz riesig^[zugegeben, ein subjektiver Ausdruck],\nwas die Berechnungen (zeitaufwändig) und damit nervig machen können.\nDarüber hinaus kann es nötig sein, dass Sie mehr Speicher auf Ihrem Computer zur Verfügung stellen müssen^[Kaufen...].\nWir müssen noch `maximum_size = NULL`, um das Jonglieren mit riesigen Matrixen zu erlauben.\nMöge der Gott der RAMs und Arbeitsspeicher uns gnädig sein!\n:::\n\n\n\n\n\nMit `pairwise_dist` dauert die Berechnung sehr lange und braucht wohl sehr viel Speicher.\nMitunter kam folgender Fehler auf: \"R error: vector memory exhausted (limit reached?)\".\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-25_6206963ffb4d125005675e344bc9d8f9'}\n\n```{.r .cell-code}\nword_neighbors_glove6b <- \ntidy_glove %>% \n  slice_head(prop = .1) %>% \n  pairwise_dist(item1, dimension, value, maximum_size = NULL)\n\nhead(word_neighbors_glove6b)\n\ntidy_glove %>% \n  filter(item1 == \"inaccurate\") %>% \n  arrange(-value) %>% \n  slice_head(n = 5)\n```\n:::\n\n\n\n\nDeswegen probieren wir doch die Funktion `nearest_neighbors`, so wies im Buch vorgeschlagen wird.\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-26_3ea1d35aff1457e99642ec17ea242695'}\n\n```{.r .cell-code}\nnearest_neighbors <- function(df, token) {\n  df %>%\n    widely(\n      ~ {\n        y <- .[rep(token, nrow(.)), ]\n        res <- rowSums(. * y) / \n          (sqrt(rowSums(. ^ 2)) * sqrt(sum(.[token, ] ^ 2)))\n        matrix(res, ncol = 1, dimnames = list(x = names(res)))\n      },\n      sort = TRUE,\n      maximum_size = NULL\n    )(item1, dimension, value) %>%\n    select(-item2)\n}\n```\n:::\n\n::: {.cell hash='word-embedding_cache/html/tidy-glove-nearest-neighbors_05b693e829b70dcc6e4b599ceb0a4ab8'}\n\n```{.r .cell-code}\ntidy_glove %>%\n  # slice_head(prob = .1) %>% \n  nearest_neighbors(\"error\") %>% \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|item1     |     value|\n|:---------|---------:|\n|error     | 1.0000000|\n|errors    | 0.7916719|\n|mistake   | 0.6641135|\n|correct   | 0.6205814|\n|incorrect | 0.6132556|\n|fault     | 0.6068035|\n\n</div>\n:::\n:::\n\n\n\nEntschachteln wir unsere Daten zu `complaints`: \n\n\n\n::: {.cell hash='word-embedding_cache/html/unnest-tidy-complaints3_57759d8c6482927be07e0a20a76e8e46'}\n\n```{.r .cell-code}\ntidy_complaints3 <-\n  nested_words3 %>% \n  unnest(words)\n```\n:::\n\n\n\n\nDann erstellen wir uns eine Tabelle, in der nur die Schnittmenge der Wörter aus den Beschwerden und Glove vorkommen.\nDazu nutzen winr einen [inneren Join](https://github.com/gadenbuie/tidyexplain/blob/main/images/inner-join.gif)\n\n![Inner Join, Quelle: Garrick Adenbuie](img/inner-join.gif)\n\n[Quelle](https://github.com/gadenbuie/tidyexplain)\n\n\n\n\n::: {.cell hash='word-embedding_cache/html/join-complaints-glove_7e7e9d1b161457af12ef8d773a573e2f'}\n\n```{.r .cell-code}\ncomplaints_glove <- \ntidy_complaints3 %>% \n  inner_join(by = \"word\", \n  tidy_glove %>% \n  distinct(item1) %>% \n  rename(word = item1)) \n\nhead(complaints_glove)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| complaint_id|word    |\n|------------:|:-------|\n|      3384392|systems |\n|      3384392|inc     |\n|      3384392|is      |\n|      3384392|trying  |\n|      3384392|to      |\n|      3384392|collect |\n\n</div>\n:::\n:::\n\n\nWie viele unique (distinkte) Wörter gibt es in unserem Corpus?\n\n\n::: {.cell hash='word-embedding_cache/html/tidy_complaints3_distinct_words_n_46d25d8395197d57ba7f62e8a684053b'}\n\n```{.r .cell-code}\ntidy_complaints3_distinct_words_n <- \ntidy_complaints3 %>% \n  distinct(word) %>% \n  nrow()\n\ntidy_complaints3_distinct_words_n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 222\n```\n:::\n:::\n\n\n\nIn `tidy_complaints` gibt es übrigens 222 verschiedene Wörter.\n\n\n\n\n::: {.cell hash='word-embedding_cache/html/word_matrix_515d7820fa89ea3207aa9996d743b1c2'}\n\n```{.r .cell-code}\nword_matrix <- tidy_complaints3 %>%\n  inner_join(by = \"word\",\n             tidy_glove %>%\n               distinct(item1) %>%\n               rename(word = item1)) %>%\n  count(complaint_id, word) %>%\n  cast_sparse(complaint_id, word, n)\n\n#word_matrix\n```\n:::\n\n\n`word_matrix` zählt für jede der 10 Beschwerden, welche Wörter (und wie häufig) vorkommen.\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-27_b87334866a76548713b729cc85176969'}\n\n```{.r .cell-code}\ndim(word_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  10 222\n```\n:::\n:::\n\n\n10 Beschwerden (Dokumente) und 222 unique Wörter.\n\n\n\n::: {.cell hash='word-embedding_cache/html/glove_matrix_eb9668131fa8217619c77afb1d502521'}\n\n```{.r .cell-code}\nglove_matrix <- tidy_glove %>%\n  inner_join(by = \"item1\",\n             tidy_complaints3 %>%\n               distinct(word) %>%\n               rename(item1 = word)) %>%\n  cast_sparse(item1, dimension, value)\n\n#glove_matrix\n```\n:::\n\n\n\n`glove_matrix` gibt für jedes unique Wort den Einbettungsvektor an.\n\n\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-28_2a216b00fa88a6905857c203a532be92'}\n\n```{.r .cell-code}\ndim(glove_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 222 100\n```\n:::\n:::\n\n\nDas sind 222 unique Wörter und 100 Dimensionen des Einbettungsvektors.\n\n\n\nJetzt können wir noch pro Dokument (10 in diesem Beispiel) die mittlere \"Position\" jedes Dokuments im Einbettungsvektor ausrechnen.\nBildlich gesprochen: Was ist der mittlere Raumpunkt (Zentroid) des Bienenschwarms, wobei eine Biene ein Dokument darstellt und die Raumachsen die Dimensionen des Einbettungsvektors.\n\nDazu gewichten wir jedes Wort eines Dokuments mit den Ladungen des Einbettungsvektor und summieren diese Terme.\nEs resultiert eine Matrix mit einem Einbettungsvektor pro Dokument.\nDiese Matrix können wir jetzt als Prädiktorenmatrix hernehmen.\n\n\n::: {.cell hash='word-embedding_cache/html/doc_matrix_0d6b8b779ddfebe4003e7986bb8f3e2f'}\n\n```{.r .cell-code}\ndoc_matrix <- word_matrix %*% glove_matrix\n#doc_matrix %>% head()\n```\n:::\n\n::: {.cell hash='word-embedding_cache/html/unnamed-chunk-29_f4b439726150082b54707ad3299d1323'}\n\n```{.r .cell-code}\ndim(doc_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  10 100\n```\n:::\n:::\n\n\n\nDie Anzahl der Dokumente ist 10 und die Anzahl der Dimensionen (des Einbettungsvektors) ist 100.\n\n\n## Fazit\n\nWorteinbettungen sind eine aufwändige Angelegenheit. \nPositiv gesprochen kann ein Analysti die Muskeln spielen lassen und zeigen, was sie oder er so alles drauf hat.\nIst ja schon cooles Zeugs, die Word Embeddings.\nEs besteht die Chance, dass man mit dieser Methode bessere Vorhersagen erreicht, als mit anderen, einfachen\nAnsätzen wir Worthäufigkeiten oder tf-idf.\nAuf der anderen Seite ist es oft sinnvoll, mit einfachen Ansätzen zu starten,\nund zu sehen, wie weit man kommt.\nVielleicht ja weit genug.\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}