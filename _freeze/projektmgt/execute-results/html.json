{
  "hash": "6135890963d413ce1538b1993fe372bc",
  "result": {
    "markdown": "# Projektmanagement\n\n\n## Am Anfang\n\n\nSie haben Großes vor! \nNaja, zumindest planen Sie ein neues Data-Science-Projekt.\n\nUnd, schlau wie Sie sind,\nstürzen Sie nicht sofort an die Tastatur,\num sich einige Modelle berechnen zu lassen. Nein!\nSie denken erst einmal nach.\nZum Beispiel,\nwie die einzelnen Analyseschritte aussehen,\nworin sie bestehen, und in welcher Abfolge sie zu berechnen sind,\ns. @fig-projekt1.\n\n\n[So könnte Ihr Projektplan am Anfang aussehen, man spricht auch von einer Pipeline](img/project1.JPG){#fig-projekt1}\n\n\n\n## Sie träumen von einem Werkzeug\n\n\nNach einiger Zeit überlegen Sie sich,\ndass Sie ein System bräuchten, das Ihre Skizze umsetzt in tatsächliche Berechnungen.\nUnd zwar suchen Sie ein Projektmanagement-System das folgendes Desiderata erfüllt:\n\n1. Es führt die einzelnen Schritte Ihres Projekt, die \"Pipeline\" in der richtigen Reihenfolge\n2. Es aktualisiert veraltete Objekte, aber es berechnet *nicht* Modelle neu, die unverändert sind\n3. Es ist gut zu debuggen\n\nJa, von so einem Werkzeug träumen Sie.\n\n\nUnd tatsächlich, Ihr Traum geht in Erfüllung. Dieses System existiert.\nGenau genommen gibt es viele Systeme,\ndie sich anschicken, Ihre Wünsche zu erfüllen.\nWir schauen uns eines näher an, das speziell für R gemacht ist.\nDas [R-Paket `targets`](https://books.ropensci.org/targets/).\n\n\n\n## Targets\n\n\nEs lohnt sich, an dieser Stelle den [\"Walkthrough\" aus dem Benutzerhandbuch](https://books.ropensci.org/targets/walkthrough.html) von Targets durchzuarbeiten.\n\n\n\nFür ein Projekt ähnlich zu den, die \nwir in diesem Buch bearbeiten,\nist folgende `_targets.R`-Datei ein guter Start.\n\n\n\n\n::: {.cell hash='projektmgt_cache/html/unnamed-chunk-1_7e8518c2425ba9101f4ccad3051cab5b'}\n\n```{.r .cell-code}\nlibrary(targets)\n\n\n# Funktionen einlesen:\n#purrr::walk(list.files(path = \"funs\", pattern = \".R\", full.names = TRUE), source)\nsource(\"funs/def-recipe.R\")\nsource(\"funs/read-train-data.R\")\nsource(\"funs/read-test-data.R\")\n\n# Optionen, z.B. allgemein verfügbare Pakete in den Targets:tar_option_set(packages = c(\"readr\", \n                            \"dplyr\", \n                            \"ggplot2\", \n                            \"purrr\", \n                            \"easystats\", \n                            \"tidymodels\", \n                            \"textrecipes\"))\n\n# Definition der Pipeline:\nlist(\n  tar_target(data_train, read_train_data()),\n  tar_target(data_test, read_test_data()),\n  tar_target(recipe1, def_recipe(data_train)\n  ),\n  tar_target(model1,\n             logistic_reg(penalty = tune(), mixture = 1) %>%\n               set_mode(\"classification\") %>%\n               set_engine(\"glmnet\")\n             ),\n  tar_target(workflow1,\n             workflow() %>% add_recipe(recipe1) %>% add_model(model1)\n             ),\n  tar_target(grid1,\n             grid_regular(penalty(), levels = 3)\n             ),\n  tar_target(grid_fitted,\n             tune_grid(workflow1, \n                       resamples = vfold_cv(data_train, v = 2),\n                       grid = grid1)\n  ),\n  tar_target(best_hyperparams,\n             select_by_one_std_err(grid_fitted, metric = \"roc_auc\", penalty)\n             ),\n  tar_target(fit1,\n             workflow1 %>% finalize_workflow(best_hyperparams) %>% fit(data_train)),\n  tar_target(preds,\n             fit1 %>% \n               predict(data_test) %>% \n               bind_cols(data_test) %>% \n               mutate(c1 = factor(c1))),\n  tar_target(metrics1,\n             preds %>% metrics(truth = c1, .pred_class))\n)\n```\n:::\n\n\n\n\nDann kann man auf den Play-Button drücken und die ganze Pipeline wird berechnet:\n\n\n::: {.cell hash='projektmgt_cache/html/unnamed-chunk-2_91c7210b2a41b073823e1f7e25db19fc'}\n\n```{.r .cell-code}\ntar_make()\n```\n:::\n\n\nWenn die Pipeline aktuell ist, und nichts berechnet werden muss (und daher auch schon fehlerfrei durchgelaufen ist), sieht die Ausgabe so aus:\n\n```\n✔ skip target grid1\n✔ skip target model1\n✔ skip target data_train\n✔ skip target data_test\n✔ skip target recipe1\n✔ skip target workflow1\n✔ skip target grid_fitted\n✔ skip target best_hyperparams\n✔ skip target fit1\n✔ skip target preds\n✔ skip target metrics1\n✔ skip pipeline [0.121 seconds]\n```\n\n\nDie Pipeline kann man sich als DAG bzw. als Abhängigkeitsgraph visualisieren lassen:\n\n\n::: {.cell hash='projektmgt_cache/html/unnamed-chunk-3_bf2c3b476d39fcb1c9ed10952774a146'}\n\n```{.r .cell-code}\ntar_visnetwork()\n```\n:::\n\n\n\n![Abhängigkeitsgraph der Pipeline](img/tar-network1.png)\n\n\n\nEinzelne Objekte kann man sich komfortabel anschauen mit `tar_load(objekt)`,\nz.B. `tar_load(fit1)` usw.\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}