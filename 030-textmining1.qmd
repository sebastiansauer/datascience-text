
# Textmining 1



![Text als Datenbasis prädiktiver Modelle](img/text-mining-1476780_640.png){width=10%}
Bild von <a href="https://pixabay.com/de/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780">mcmurryjulie</a> auf <a href="https://pixabay.com/de//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780">Pixabay</a>



## Vorab


### Lernziele


- Die vorgestellten Techniken des Textminings mit R anwenden können



### Vorbereitung

- Lesen Sie in @smltar Kap. 2.



### Benötigte R-Pakete

```{r}
#| message: false
library(tidyverse)
library(tokenizers)  # Tokenisieren
library(tidymodels)  # Rezepte für Textverarbeitung
library(tidyverse)
library(tidytext)  # Textanalyse-Tools
library(hcandersenr)  # Textdaten: Märchen von H.C. Andersen
library(SnowballC)  # Stemming
library(lsa)  # Stopwörter
library(easystats)  # Komfort für deskriptive Statistiken, wie `describe_distribution`
library(textclean)  # Emojis ersetzen
library(wordcloud)  # unübersichtlich, aber manche mögen es
```



## Einfache Methoden des Textminings


:::{#def-nlp}
### Natural Language Processing
Die Analyse von Texten (natürlicher Sprache) mit Hilfe von Methoden des Maschinellen Lernens bezeichnet man (auch) als *Natural Language Processing* (NLP). $\square$
:::



### Tokenisierung

Erarbeiten Sie dieses Kapitel: @smltar, [Kap. 2](https://smltar.com/tokenization.html#tokenization)

Wie viele Zeilen hat das Märchen "The Fir tree" (in der englischen Fassung?)


```{r}
hcandersen_en %>% 
  filter(book == "The fir tree") %>% 
  nrow()
```


### Stopwörter entfernen


Erarbeiten Sie dieses Kapitel: s. @smltar, [Kap. 3](https://smltar.com/stopwords.html#stopwords)



Eine alternative Quelle von Stopwörtern - in verschiedenen Sprachen - 
biwetet das Paket `quanteda`:

```{r}
stop2 <-
  tibble(word = quanteda::stopwords("german"))

head(stop2)
```

Es bestehst (in der deutschen Version) aus `r length(quanteda::stopwords("german"))` Wörtern.




### Wörter zählen {#sec-woerterzaehlen}

Ist der Text tokenisiert, kann man einfach mit "Bordmitteln" die Wörter zählen (Bordmittel aus dem Tidyverse, in diesem Fall).


```{r}
hc_andersen_count <- 
  hcandersen_de %>% 
  filter(book == "Das Feuerzeug") %>% 
  unnest_tokens(output = word, input = text) %>% 
  anti_join(stop2) %>% 
  count(word, sort = TRUE) 

hc_andersen_count %>% 
  head()
```



Zur Visualisierung eignen sich Balkendiagramme, s. @fig-hcandersen-count.


```{r}
#| label: fig-hc-andersen-count
#| fig.cap: "Die häufigsten Wörter in H.C. Anderssens Feuerzeug"

hc_andersen_count %>% 
  slice_max(order_by = n, n = 10) %>% 
  mutate(word = factor(word)) %>% 
  ggplot() +
  aes(y = reorder(word, n), x = n) +
  geom_col()
  
```


Dabei macht es Sinn, aus `word` einen Faktor zu machen,
denn Faktorstufen kann man sortieren,
zumindest ist das die einfachste Lösung in `ggplot2` (wenn auch nicht super komfortabel).


Eine (beliebte?) Methode, um Worthäufigkeiten in Corpora darzustellen, 
sind *Wortwolken*, s. @fig-wordcloud1.
Es sei hinzugefügt, dass solche Wortwolken nicht gerade optimale
perzeptorische Qualitäten aufweisen.

```{r}
#| label: fig-wordcloud1
#| fig.cap: "Eine Wortwolke zu den häufigsten Wörtern in H.C. Andersens Feuerzeug"
wordcloud(words = hc_andersen_count$word,
          freq = hc_andersen_count$n,
          max.words = 50,
          rot.per = 0.35,
          colors = brewer.pal(8, "Dark2"))
```


### tf-idf

#### Grundlagen

Was sind "häufige" Wörter? Wörter wie "und" oder "der" sind sehr häufig, aber sie nicht spezifisch für bestimmte Texte. Sie sind sozusagen "Allerweltswörter".
Man könnte argumentieren, was wir suchen, sind nicht einfach häufige Wörter, sondern Wörter, die *relevant* sind.
Unter "relevant" könnte man verstehen "häufig aber spezifisch".


Da kommt `tf-idf` ins Spiel (*term frequency–inverse document frequency*). 
`tf-idf` ist eine Möglichkeit, Wörter die *häufig* und gleichzeitig *spezifisch* für einen Text sind, aufzufinden.

Betrachten wir als Beispiel @tbl-shakespeare ([Quelle](https://en.wikipedia.org/wiki/Tf%E2%80%93idf)).
Das Wort "Romeo" ist hoch spezifisch in dem Sinne, dass sein `idf` hoch ist (relativ zu den anderen Wörtern).
Im Gegensatz dazu ist das Wort "good" nicht spezifisch für ein bestimmtes Stück von Shakespeare - der IDF-Wert ist sehr klein.

```{r}
#| echo: false
#| tbl-cap: Einige Wörter aus Shakespeares Werken
#| label: tbl-shakespeare
shakespeare <-
tibble::tribble(
       ~Word, ~tf,  ~idf,
     "Romeo",  1L,  1.57,
     "salad",  2L,  1.27,
  "Falstaff",  4L, 0.967,
    "forest", 12L, 0.489,
    "battle", 21L, 0.246,
       "wit", 34L, 0.037,
      "fool", 36L, 0.012,
      "good", 37L,     0,
     "sweet", 37L,     0
  ) |> 
  mutate(tf_idf = tf*idf)

shakespeare

```


:::{#def-tf}
### Text Frequency (Worthäufigkeit)
Die Worthäufigkeit (Vorkommenshäufigkeit) eines Wortes (oder Terms, Tokens) $h_w$ in einem Dokument $d$ (oder Corpus) ist definiert als die Häufigkeit des Wortes geteilt durch die Anzahl aller Wörter des Dokuments, $h_d$:

$tf(w,d) = \frac{h_w}{h_d} \square$
:::

Manchmal wird auch eine logarithmierte Version verwendet.


:::{#def-idf}
### Inverse Document Frequency (Inverse Dokumenthäufigkeit)
Die IDF eines Wortes hängt erstens von der Gesamtzahl der *Dokumente* (nicht Wörter) im Corpus, $N$, ab.
Zweitens hängt IDF davon ab, wie viele Dokumente das Wort enthalten, $N_w$. 

$idf(w,c) = log \frac{N}{N_w} \square$
:::


:::{#def-tfidf}
### TF-IDF
TF-IDF ist ein Maß zur Beurteilung der *Relevanz* von Wörtern eines Corpus.

$\text{tf-idf} = tf \cdot idf \qquad \square$
:::



#### Beispiel zur tf-idf

```{r}
#library(hcandersenr)
data(hcandersen_de)

hca_count <- 
hcandersen_de |> 
  unnest_tokens(word, text) |> 
  count(book, word, sort = TRUE)  |> # Zähle Wörter pro Buch
  ungroup()  # um gleich nur nach Bücher zu gruppieren

head(hca_count)
```

Die Gesamtzahl der Wörter pro Buch:

```{r}
words_total <-
  hca_count |> 
  group_by(book) |> 
  summarise(total = sum(n))

words_total |> 
  head()  # die ersten paar von 150 Büchern
```

Dann fügen wir die Spalte mit der Gesamt-Wortzahl des jeweiligen Buches zur Tabelle `hca_count` hinzu:

```{r}
hca_count <-
  hca_count |> 
  left_join(words_total)

head(hca_count)
```


```{r}
hca_count <-
  hca_count |> 
  bind_tf_idf(term = word, document = book, n = n)

hca_count |> 
  arrange(-tf_idf) |> 
  head()
```



### Stemming (Wortstamm finden)

Erarbeiten Sie dieses Kapitel: @smltar, [Kap. 4](https://smltar.com/stemming.html#stemming)


Vertiefende Hinweise zum *UpSet plot* finden Sie [hier](https://ieeexplore.ieee.org/document/6876017), @lex_upset_2014.


Für welche Sprachen gibt es Stemming im Paket `SnowballC`?

```{r}
library(SnowballC)
getStemLanguages()
```


Einfacher Test: Suchen wir den Wordstamm für das Wort "wissensdurstigen", wie in "die wissensdurstigen Studentis löcherten dis armi Professi"^[[Gender-i](https://gender-i.de/#mit-bestimmtem-artikel)].

```{r}
wordStem("wissensdurstigen", language = "german")
```


Werfen Sie mal einen Blick in das Handbuch von [SnowballC](https://cran.r-project.org/web/packages/SnowballC/SnowballC.pdf).



### Fallstudie AfD-Parteiprogramm



Daten einlesen:


```{r}
d_link <- "https://raw.githubusercontent.com/sebastiansauer/pradadata/master/data-raw/afd_2022.csv"
afd <- read_csv(d_link, show_col_types = FALSE)
```

Wie viele Seiten hat das Dokument?

```{r}
nrow(afd)
```

Und wie viele Wörter?

```{r}
str_count(afd$text, pattern = "\\w") %>% sum(na.rm = TRUE)
```



Aus breit mach lang, oder: wir tokenisieren (nach Wörtern): 

```{r}
afd %>% 
  unnest_tokens(output = token, input = text) %>% 
  filter(str_detect(token, "[a-z]")) -> afd_long
```


Stopwörter entfernen:

```{r}
data(stopwords_de, package = "lsa")

stopwords_de <- tibble(word = stopwords_de)

# Für das Joinen werden gleiche Spaltennamen benötigt:
stopwords_de <- stopwords_de %>% 
  rename(token = word)  

afd_long %>% 
  anti_join(stopwords_de) -> afd_no_stop
```


Wörter zählen:

```{r}
afd_no_stop %>% 
  count(token, sort = TRUE) -> afd_count

head(afd_count)
```


Wörter trunkieren:

```{r}
afd_no_stop %>% 
  mutate(token_stem = wordStem(token, language = "de")) %>% 
  count(token_stem, sort = TRUE) -> afd_count_stemmed

head(afd_no_stop)
```



### Stringverarbeitung



Erarbeiten Sie dieses Kapitel: @r4ds, [Kap. 14](https://r4ds.had.co.nz/strings.html)



#### Regulärausdrücke {#regex}

Das `"[a-z]"` in der Syntax oben steht für "alle Buchstaben von a-z". D
iese flexible Art von "String-Verarbeitung mit Jokern" nennt man *Regulärausdrücke* (regular expressions; regex). 
Es gibt eine ganze Reihe von diesen Regulärausdrücken, die die Verarbeitung von Texten erleichert. 
Mit dem Paket `stringr` geht das - mit etwas Übung - gut von der Hand. 
Nehmen wir als Beispiel den Text eines Tweets:

```{r}
string <- "Correlation of unemployment and #AfD votes at #btw17: ***r = 0.18***\n\nhttps://t.co/YHyqTguVWx"  
```

Möchte man Ziffern identifizieren, so hilft der Reulärausdruck `[:digit:]`:

"Gibt es mindestens eine Ziffer in dem String?"

```{r}
str_detect(string, "[:digit:]")
```

"Finde die Position der ersten Ziffer! Welche Ziffer ist es?"

```{r}
str_locate(string, "[:digit:]")
str_extract(string, "[:digit:]")
```

"Finde alle Ziffern!"

```{r}
str_extract_all(string, "[:digit:]")
```


"Finde alle Stellen an denen genau 2 Ziffern hintereinander folgen!"
```{r}
str_extract_all(string, "[:digit:]{2}")
```

Der Quantitätsoperator `{n}` findet alle Stellen, in der der der gesuchte Ausdruck genau $n$ mal auftaucht.


"Zeig die Hashtags!"

```{r}
str_extract_all(string, "#[:alnum:]+")
```

Der Operator `[:alnum:]` steht für "alphanumerischer Charakter" - also eine Ziffer oder ein Buchstabe; synonym hätte man auch `\\w` schreiben können (w wie word). Warum werden zwei Backslashes gebraucht? Mit `\\w` wird signalisiert, dass nicht der Buchstabe *w*, sondern etwas Besonderes, eben der Regex-Operator `\w` gesucht wird. 

"Zeig die URLs!"

```{r}
str_extract_all(string, "https?://[:graph:]+")
```

Das Fragezeichen `?` ist eine Quantitätsoperator, der einen Treffer liefert, wenn das vorherige Zeichen (hier *s*) null oder einmal gefunden wird. `[:graph:]` ist die Summe von `[:alpha:]` (Buchstaben, groß und klein), `[:digit:]` (Ziffern) und `[:punct:]` (Satzzeichen u.ä.).

"Zähle die Wörter im String!"

```{r}
str_count(string, boundary("word"))
```


"Liefere nur Buchstaben*folgen* zurück, lösche alles übrige"

```{r}
str_extract_all(string, "[:alpha:]+")
```

Der Quantitätsoperator `+` liefert alle Stellen zurück, in denen der gesuchte Ausdruck *einmal oder häufiger*  vorkommt. Die Ergebnisse werden als Vektor von Wörtern zurückgegeben. Ein anderer Quantitätsoperator ist `*`, der für 0 oder mehr Treffer steht. Möchte man einen Vektor, der aus Stringen-Elementen besteht zu einem Strring zusammenfüngen, hilft `paste(string)` oder `str_c(string, collapse = " ")`.

```{r}
str_replace_all(string, "[^[:alpha:]+]", "")
```

Mit dem Negationsoperator `[^x]` wird der Regulärausrck `x` negiert; die Syntax oben heißt also "ersetze in `string` alles außer Buchstaben durch Nichts". Mit "Nichts" sind hier Strings der Länge Null gemeint; ersetzt man einen belieibgen String durch einen String der Länge Null, so hat man den String gelöscht.

Das Cheatsheet zur Strings bzw zu `stringr` von RStudio gibt einen guten Überblick über Regex; im Internet finden sich viele Beispiele.










#### Regex im Texteditor


Einige Texteditoren unterstützen Regex, so auch RStudio.

Das ist eine praktische Sache. 
Ein Beispiel: Sie haben eine Liste mit Namen der Art:

- Nachname1, Vorname1
- Nachname2, Vorname2
- Nachname3, Vorname3


Und Sie möchten jetzt aber die Liste mit Stil *Vorname Nachname* sortiert haben.

RStudio mit Regex macht's möglich, s. @fig-vorher-regex.


::: {#fig-regrex-rstudio}

![Vorher; mit Regex-Syntax](img/regex1.png){#fig-vorher-regex}
![Vorher; mit Regex-Syntax](img/regex2.png){#fig-nacher-regex}

:::





### Emoji-Analyse

Eine einfache Art, Emojis in einer Textmining-Analyse zu verarbeiten, 
bietet das Paket `textclean`:

```{r}
fls <- system.file("docs/emoji_sample.txt", package = "textclean")
x <- readLines(fls)[1]
x
```


```{r}
replace_emoji(x)
replace_emoji_identifier(x)
```




### Text aufräumen

Eine Reihe generischer Tests bietet das Paket `textclean` von [Tyler Rinker](https://github.com/trinker/textclean):


Hier ist ein "unaufgeräumeter" Text:

```{r}
x <- c("i like", "<p>i want. </p>. thet them ther .", "I am ! that|", "", NA, 
    "&quot;they&quot; they,were there", ".", "   ", "?", "3;", "I like goud eggs!", 
    "bi\xdfchen Z\xfcrcher", "i 4like...", "\\tgreat",  "She said \"yes\"")
```



Lassen wir uns dazu ein paar Diagnostiken ausgeben.

```{r}
Encoding(x) <- "latin1"
x <- as.factor(x)
check_text(x)
```




### Diverse Wortlisten


[Tyler Rinker](https://github.com/trinker/lexicon) stellt mit dem Paket `lexicon` eine Zusammenstellung von Wortlisten zu diversen Zwecken zur Verfügung.
Allerding nur für die englische Sprache.



### One-hot-Enkodierung (Dummy-Variablen)

Viele Methoden des Maschinellen Lernens können keine nominalen Variablen verarbeiten. Daher müssen nominale Variablen vorab häufig erst in numerische Variablen umgewandelt werden.
In der Textanalyse

Nehmen wir als einfaches Beispiel den berühmten Iris-Datensatz:

```{r}
data(iris)
iris$id <- 1:nrow(iris)  # ID-Variable hinzufügen

iris_mini <-
  iris |> 
  filter(id %in% c(1, 51, 101))  # von jeder Species ein Exemplar
```


:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: false
#| tbl-cap: Tabelle im Lang-Format
iris_rec <-
  recipe( ~ ., data = iris) |> 
  step_dummy(Species, one_hot = TRUE)

iris_rec_prepped <-
  iris_rec |> prep()

iris_baked <- 
  iris_rec_prepped |> 
  bake(new_data = NULL)

iris |> 
  select(id, Species) |> 
  filter(id %in% c(1, 51, 101))
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| tbl-cap: "Tabelle mit Spalte 'Species' im One-Hot-Format"
iris_baked |> 
  select(id, starts_with("Species"))  |> 
  filter(id %in% c(1, 51, 101)) 
```

:::

::::



#### Tidymodels

Tidymodels bieten eine recht komfortable Methode zur One-Hot-Transformation:

```{r}
iris_rec <-
  recipe( ~ ., data = iris) |> 
  step_dummy(Species, one_hot = TRUE)
```

```{r}
iris_rec_prepped <-
  iris_rec |> prep()

iris_baked <-
  iris_rec_prepped |> bake(new_data = NULL)
```


```{r}
iris_baked |> 
  select(starts_with("Species")) |> 
  head()
```
 
`tidymodels` ist primär für das professionelle Modellieren angelegt;
"mal eben" eine One-Hot-Enkodierung durchzuführen, braucht ein paar Zeilen Code.

Ohne den Parameter `one_hot = TRUE` würden anstelle von $k$ Stufen nur $k-1$ Stufen zurückgegeben werden.

Mal sehen, ob es auch schneller geht, also mit weniger Zeilen Code.


#### Base R: model.matrix


```{r}
iris_one_hot_matrix <- model.matrix(~ 0 + Species, data = iris_mini)
iris_one_hot_matrix
```

Das `+ 0` sorgt dafür, dass bei $k$ Stufen von Species nicht, wie bei linearen Modellen nötig, $k-1$ Stufen zurückgegeben werden, sondern $k$ Stufen.


`model.matrix` gibt eine Matrix zurück;
diese wandlen wir noch in einen Dataframe um:

```{r}
iris_one_hot_matrix |> 
  as_tibble() |> 
  mutate(id = 1:n()) |> 
  select(id, everything())
```


#### Paket `fastDummies`

Das Paket `fastDummies` bietet ebenfalls eine recht einfache Konvertierung zu One-Hot-Enkodierung:



```{r}
library(fastDummies)

dummy_cols(iris_mini, select_columns = "Species") |> 
  select(starts_with("Species"))
```



### Sentimentanalyse {#sec-sentimentanalyse}


#### Einführung


Eine weitere interessante Analyse ist, die "Stimmung" oder "Emotionen" (Sentiments) eines Textes auszulesen. 
Die Anführungszeichen deuten an, dass hier ein Maß an Verständnis suggeriert wird, welches nicht (unbedingt) von der Analyse eingehalten wird. 
Jedenfalls ist das Prinzip der Sentiment-Analyse im einfachsten Fall so: 





1. Schau dir jeden Token aus dem Text an.  
2. Prüfe, ob sich das Wort im Lexikon der Sentiments wiederfindet.  
3. Wenn ja, dann addiere den Sentimentswert dieses Tokens zum bestehenden Sentiments-Wert.  
4. Wenn nein, dann gehe weiter zum nächsten Wort.  
5. Liefere zum Schluss die Summenwerte pro Sentiment zurück.  




     
Es gibt Sentiment-Lexika, die lediglich einen Punkt für "positive Konnotation" bzw. "negative Konnotation" geben; andere Lexiko weisen differenzierte Gefühlskonnotationen auf. Wir nutzen hier das *deutsche* Sentimentlexikon `sentiws` [@Remus2010]. Sie können das Lexikon als CSV hier herunterladen:

```{r}
#| message: false
sentiws <- read_csv("https://osf.io/x89wq/?action=download")
```


Den Volltext zum Paper finden Sie z.B. [hier](http://www.lrec-conf.org/proceedings/lrec2010/pdf/490_Paper.pdf).

Alternativ können Sie die Daten aus dem Paket `pradadata` laden. Allerdings müssen Sie dieses Paket von Github installieren:

```{r eval = FALSE}
install.packages("devtools", dep = TRUE)
devtools::install_github("sebastiansauer/pradadata")
```



```{r parse-sentiment-dics}
#| eval: false
data(sentiws, package = "pradadata")
```

@tbl-afdcount zeigt einen Ausschnitt aus dem Sentiment-Lexikon *SentiWS*.

```{r sentiws-head, echo = FALSE}
#| echo: false
#| label: tbl-afdcount
#| tbl-cap: "Auszug aus SentiWS"
head(sentiws)
```


#### Ungewichtete Sentiment-Analyse

Nun können wir jedes Token des Textes mit dem Sentiment-Lexikon abgleichen; 
dabei zählen wir die Treffer für positive bzw. negative Terme. 
Zuvor müssen wir aber noch die Daten (`afd_long`) mit dem Sentimentlexikon zusammenführen (joinen). 
Das geht nach bewährter Manier mit `inner_join`; "inner" sorgt dabei dafür, dass nur Zeilen behalten werden, die in beiden Dataframes vorkommen. Tabelle @tbl-afdsenti zeigt Summe, Anzahl und Anteil der Emotionswerte.


Wir nutzen die Tabelle `afd_long`,  die wir oben definiert haben.

```{r}
afd_long %>% 
  inner_join(sentiws, by = c("token" = "word")) %>% 
  select(-inflections) -> afd_senti  # die Spalte brauchen wir nicht

afd_senti %>% 
  group_by(neg_pos) %>% 
  summarise(polarity_sum = sum(value),
            polarity_count = n()) %>% 
  mutate(polarity_prop = (polarity_count / sum(polarity_count)) %>% round(2)) ->
  afd_senti_tab
```

```{r afd_senti_tab, echo = FALSE}
#| label: tbl-afdsenti
#| tbl-cap: "Zusammenfassung von SentiWS"

afd_senti_tab
```


Die Analyse zeigt, dass die emotionale Bauart des Textes durchaus interessant ist: 
Es gibt viel mehr positiv getönte Wörter als negativ getönte. 
Allerdings sind die negativen Wörter offenbar deutlich stärker emotional aufgeladen, 
denn die Summe an Emotionswert der negativen Wörter ist (überraschenderweise?) deutlich größer als die der positiven.

Betrachten wir also die intensivsten negativ und positive konnotierten Wörter näher.

```{r}
afd_senti %>% 
  distinct(token, .keep_all = TRUE) %>% 
  mutate(value_abs = abs(value)) %>% 
  top_n(20, value_abs) %>% 
  pull(token)
```

Diese "Hitliste" wird zumeist (19/20) von negativ polarisierten Begriffen aufgefüllt, 
wobei "besonders" ein Intensivierwort ist, welches das Bezugswort verstärt ("besonders gefährlich"). 
Das Argument `keep_all = TRUE` sorgt dafür, dass alle Spalten zurückgegeben werden, 
nicht nur die durchsuchte Spalte `token`. 
Mit `pull` haben wir aus dem Dataframe, der von den dplyr-Verben übergeben wird, 
die Spalte `pull` "herausgezogen"; 
hier nur um Platz zu sparen bzw. der Übersichtlichkeit halber.


     
Nun könnte man noch den erzielten "Netto-Sentimentswert" des Corpus ins Verhältnis setzen Sentimentswert des Lexikons:
Wenn es insgesamt im Sentiment-Lexikon sehr negativ zuginge,
wäre ein negativer Sentimentwer in einem beliebigen Corpus nicht überraschend. `describe_distribution` aus `{easystats}` gibt uns einen Überblick der üblichen deskriptiven Statistiken.
     

```{r}
#| eval: false
sentiws %>% 
  select(value, neg_pos) %>% 
  #group_by(neg_pos) %>% 
  describe_distribution()
```


```{r eval = TRUE}
#| echo: false
sentiws %>% 
  select(value, neg_pos) %>% 
  #group_by(neg_pos) %>% 
  describe_distribution() %>% 
  print_md()
```

Insgesamt ist das Lexikon ziemlich ausgewogen; negative Werte sind leicht in der Überzahl im Lexikon. 
Unser Corpus hat eine ähnliche mittlere emotionale Konnotation wie das Lexikon:

```{r}
afd_senti %>% 
  summarise(senti_sum = mean(value) %>% round(2))
```



### Weitere Sentiment-Lexika

[Tyler Rinker](https://github.com/trinker/sentimentr) stellt das Paket `sentimentr` zur Verfügung.
[Matthew Jockers](https://www.matthewjockers.net/2015/02/02/syuzhet/) stellt das Paket `Syushet` zur Verfügung.



### Google Trends

Eine weitere Möglichkeit, "Worthäufigkeiten" zu identifizieren ist [Google Trends](https://trends.google.com/trends/?geo=US).
Dieser Post zeigt Ihnen eine Einsatzmöglichkeit.




## Aufgaben


- [purrr-map01](https://datenwerk.netlify.app/posts/purrr-map01/purrr-map01.html)
- [purrr-map02](https://datenwerk.netlify.app/posts/purrr-map02/purrr-map02.html)
- [purrr-map03](https://datenwerk.netlify.app/posts/purrr-map03/purrr-map03.html)
- [purrr-map04](https://datenwerk.netlify.app/posts/purrr-map04/purrr-map04.html)
- [Regex-Übungen](https://regexone.com/)
- [Aufgaben zum Textmining von Tweets](https://datenwerk.netlify.app/#category=textmining)




## Fallstudie Hate-Speech


### Daten

Es finden sich mehrere Datensätze zum Thema Hate-Speech im öffentlichen Internet, eine Quelle ist [Hate Speech Data](https://ckan.hatespeechdata.com/), ein Repositorium, das mehrere Datensätze beinhaltet.



- [Kaggle Hate Speech and Offensive Language Dataset](https://www.kaggle.com/datasets/mrmorj/hate-speech-and-offensive-language-dataset?select=labeled_data.csv)
- [Bretschneider and Peters Prejudice on Facebook Dataset](https://ckan.hatespeechdata.com/dataset/bretschneider-and-peters-prejudice-on-facebook-dataset)
- [Daten zum Fachartikel"Large Scale Crowdsourcing and Characterization of Twitter Abusive Behavior"](https://github.com/ENCASEH2020/hatespeech-twitter/blob/master/hatespeech_labels.csv)


Für Textmining kann eine Liste mit anstößigen (obszönen) Wörten nützlich sein,
auch wenn man solche Dinge ungern anfässt, verständlicherweise.
[Jenyay](https://github.com/Jenyay/Obscene-Words-List) bietet solche Listen in verschiedenen Sprachen an. Die Liste von [KDNOOBW](https://github.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words) sieht sehr ähnlich aus (zumindest die deutsche Version).
Eine lange Sammlung deutscher Schimpfwörter findet sich im [insult.wiki](https://www.insult.wiki/schimpfwort-liste);
ähnlich bei [Hyperhero](http://www.hyperhero.com/de/insults.htm).







Twitterdaten dürfen nur in "dehydrierter" Form weitergegeben werden, so dass kein Rückschluss von ID zum Inhalt des Tweets möglich ist. 
Daher werden öffentlich nur die IDs der Tweets, als einzige Information zum Tweet, also ohne den eigentlichen Inhalt des Tweets, bereitgestellt.

Über die Twitter-API kann man sich, wie oben dargestellt, dann die Tweets wieder "rehydrieren", also wieder mit dem zugehörigen Tweet-Text (und sonstigen Infos des Tweets) zu versehen.




### Grundlegendes Text Mining


Wenden Sie die oben aufgeführten Techniken des grundlegenden Textminings auf einen der oben dargestellten Hate-Speech-Datensätze an.
Erstellen Sie ein (HTML-Dokument) mit Ihren Ergebnissen. 
Stellen Sie die Ergebnisse auf dem Github-Repo dieses Kurses ein.
Vergleichen Sie Ihre Lösung mit den Lösungen der anderen Kursmitglieder.

Wir nutzen noch nicht eigene Daten, die wir von Twitter ausgelesen haben, das heben wir uns für später auf.







## Vertiefung

[Julia Silge](https://juliasilge.com/) bietet eine nette [Fallstudie](https://juliasilge.com/blog/taylor-swift/) zu den Themen in Taylor Swifts Liefern.

Apropos Themenanalyse: Alternativ zum klassischen, probabilistischen Themen-Modellierung kann man pretrainierte Wort-Einbettungen verwenden. [Dieses Paper](https://aclanthology.org/2020.emnlp-main.135/) gibt eine Einführung.

[Hauptkomponenten-Analyse (Principal Component Analysis, PCA)](https://juliasilge.com/blog/stack-overflow-pca/) ist eine zentrale Methode der Datenanalyse. Diese Fallstudie stellt eine einfache Anwendung - ohne tiefere theoretische Erläuterung - vor.




