{
  "hash": "f98780aab54b48f4d7deb1880baf0700",
  "result": {
    "markdown": "\n\n\n![Text als Datenbasis prädiktiver Modelle](img/text-mining-1476780_640.png){width=10%}\n\nBild von <a href=\"https://pixabay.com/de/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780\">mcmurryjulie</a> auf <a href=\"https://pixabay.com/de//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780\">Pixabay</a>\n\n# Twitter Mining\n\n\n\n## Vorab\n\n\n### Lernziele\n\n\n- Twitterdaten via API von Twitter auslesen\n\n\n\n### Vorbereitung\n\n- Lesen Sie in @smltar Kap. 1.\n- Legen Sie sich ein Konto bei [Github](https://github.com/) an.\n- Legen Sie sich ein Konto bei [Twitter](twitter.com) an.\n- Lesen Sie [diesen Artikel zur Anmeldung bei der Twitter API](https://docs.ropensci.org/rtweet/articles/auth.html)^[Sie können [hier](https://www.howtogeek.com/343877/what-is-an-api/) nachlesen, was eine API ist.]\n\n\n\n\n### Benötigte R-Pakete\n\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-1_9ed11a5120d13869e255cbcd1975f57a'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rtweet)\nlibrary(tweetbotornot)\n```\n:::\n\n\n![R-Paket {rtweet}](https://docs.ropensci.org/rtweet/logo.png){width=10%}\n\n\nEinen Überblick über die Funktionen des Pakets (function reference) findet sich [hier](https://docs.ropensci.org/rtweet/reference/index.html).\n\n\n\n## Anmelden bei Twitter\n\n\n### Welche Accounts interessieren uns?\n\n\nHier ist eine (subjektive) Auswahl von deutschen Politikern^[Stand November 2022],\ndie einen Startpunkt gibt zur Analyse von Art und Ausmaß von Hate Speech gerichtet an deutsche Politiker:innen.\n\n\n::: {.cell hash='twittermining_cache/html/politicians-df-load_6be8a5376d3d9c6db892597e3d6a2da7'}\n\n```{.r .cell-code}\nd_path <- \"data/twitter-german-politicians.csv\"\n\nd <- read_csv(d_path)\nd\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|name                                             |party  |screenname      |comment                                |\n|:------------------------------------------------|:------|:---------------|:--------------------------------------|\n|Karl Lauterbach                                  |SPD    |Karl_Lauterbach |NA                                     |\n|Olaf Scholz                                      |SPD    |OlafScholz      |NA                                     |\n|Annalena Baerback                                |Gruene |ABaerbock       |NA                                     |\n|Bundesministerium für Wirtschaft und Klimaschutz |Gruene |BMWK            |Robert Habeck ist der Minister im BMWK |\n|Friedrich Merz                                   |CDU    |_FriedrichMerz  |CDU-Chef                               |\n|Markus Söder                                     |CSU    |Markus_Soeder   |CSU-Chef                               |\n|Cem Özdemir                                      |Gruene |cem_oezdemir    |BMEL                                   |\n|Janine Wissler                                   |Linke  |Janine_Wissler  |Linke-Chefin                           |\n|Martin Schirdewan                                |Linke  |schirdewan      |Linke-Chef                             |\n|Christian Lindner                                |FDP    |c_lindner       |FDP-Chef                               |\n|Marie-Agnes Strack-Zimmermann                    |FDP    |MAStrackZi      |Vorsitzende Verteidigungsausschuss     |\n|Tino Chrupalla                                   |AFD    |Tino_Chrupalla  |AFD-Bundessprecher                     |\n|Alice Weidel                                     |AFD    |Alice_Weidel    |AFD-Bundessprecherin                   |\n\n</div>\n:::\n:::\n\n\n\n\n### Twitter App erstellen\n\n[Tutorial](https://cran.r-project.org/web/packages/rtweet/vignettes/auth.html)\n\n[Auf der Twitter Developer Seite](https://developer.twitter.com/en/portal/dashboard) können Sie sich ein Konto erstellen und dann anmelden.\n\n\n### Intro\n\nDie Seite von [rtweet](https://docs.ropensci.org/rtweet/) gibt eine gute Starthilfe in die Benutzung des Pakets.\n\n\n### Zugangsdaten\n\n\nZugangsdaten sollte man geschützt speichern, also z.B. *nicht* in einem geteilten Ordner.\n\n\n\n::: {.cell hash='twittermining_cache/html/source-credentials-twitter_a449d902848402bd59a4cbe6b93bb15a'}\n\n```{.r .cell-code}\nsource(\"/Users/sebastiansaueruser/credentials/hate-speech-analysis-v01-twitter.R\")\n```\n:::\n\n\n\nAnmelden:\n\n\n::: {.cell hash='twittermining_cache/html/oauth-twitter_c0abb4d74b516662ad2296a48f4a74c4'}\n\n```{.r .cell-code}\nauth <- rtweet_bot(api_key = api_key,\n                   api_secret = api_secret,\n                   access_token = access_token,\n                   access_secret = access_secret)\n```\n:::\n\n\n\n\n\n\n\nAlternativ kann man sich auch als `App` anmelden,\ndamit kann man z.B. nicht posten, aber dafür mehr herunterladen.\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-2_2de34121fee6cffa6cb15ed5e1cad6c7'}\n\n```{.r .cell-code}\nauth <- rtweet_app(bearer_token = Bearer_Token)\n```\n:::\n\n\n\n\n### Schützen Sie Ihre Zugangsdaten\n\n\nAchtung, Sicherheitshinweis ...\nPasswörter und andere sensitive (Anmelde-)Informationen muss man schützen,\ndas weiß jeder.\nKonkret bedeutet es, dass Sie diese Daten *nicht* in einem öffentlichen oder\ngeteilten Repo herumliegen lassen.\nAchten Sie auch darauf, dass, wenn Sie diese Information `source`en,\nso wie ich gerade, diese dann ungeschützt in Ihrem RStudio  `Environment` Fenster\nzu sehen sind. Falls Sie also den Bildschirm teilen,\noder Ihnen jemand über die Schulter schaut,\nsind Ihre Zugangsdaten nicht geschützt.\n\nEinen sichereren Zugang bietet z.B. das [Paket `keyring`](https://r-lib.github.io/keyring/index.html).\nDieses Paket bietet eine Anbindung zur Schlüsselbundverwaltung Ihres Betriebssystems:\n\n\n>   Platform independent API to access the operating systems credential store. \n\n\nIm MacOS wird die zentrale Schlüsselbundverwaltung genutzt, in Windows und Linux die analoge Vorrichtungen.\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-3_bb7ad0cbb61c3ad52f32a997e14419b4'}\n\n```{.r .cell-code}\nlibrary(keyring)\n```\n:::\n\n\n\nWir erstellen uns einen Schlüsselbund:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-4_3b97559654ec16e2142d5bc0a2f54f0d'}\n\n```{.r .cell-code}\nkeyring_create(keyring = \"hate-speech-twitter\")\n```\n:::\n\n\n\n\nDann können wir einen Eintrag im Schlüsselbund erstellen.\nGgf. werden Sie zuerst nach dem Password des Schlüsselbunds gefragt.\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-5_240d57022d6a99e21a9fc0aedfbd3e08'}\n\n```{.r .cell-code}\nkey_set(service = \"client_id\",\n        keyring = \"hate-speech-twitter\")\n```\n:::\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-6_1cd854e5d43640626f7099f9dd9a5ccb'}\n\n```{.r .cell-code}\nkey_set(service = \"client_secret\",\n        keyring = \"hate-speech-twitter\")\n```\n:::\n\n\n\nKünftig können wir dann die Passwörter aus dem Schlüsselbund abrufen:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-7_1bfbb126679f7f6570079553289b4954'}\n\n```{.r .cell-code}\nkey_get(service = \"client_id\",\n        keyring = \"hate-speech-twitter\")\n```\n:::\n\n\n\n\n## Tweets einlesen\n\n\nZu beachten ist, dass es Limits gibt, wie viele Informationen (pro Zeiteinheit) man über die Twitter-API auslesen darf.\nInformationen dazu findet man z.B. [hier](https://developer.twitter.com/en/docs/twitter-api/rate-limits) oder auch mit `rate_limit()`.\n\n\n\n\n\nEin gängiges Limit der Twitter-API sind 900 Anfragen (z.B. Tweets auslesen) pro 15 Minuten.\n\n### Timeline einlesen einzelner Accounts\n\nMal ein paar Tweets zur Probe:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-8_d62dbaffa0edbf269f6693a1ab61b522'}\n\n```{.r .cell-code}\nsesa_test <- get_timeline(user = \"sauer_sebastian\", n = 3) %>% \n  select(full_text)\n```\n:::\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-9_aa8e2c5afc99adcd8c7d7d71c812223a'}\n::: {.cell-output .cell-output-stdout}\n```\nRT @pia_lamberty: Ein Ansatz, der sich beim Debunking wissenschaftlich als erfolgreich herausgestellt hat, ist das sog. Faktensandwich: htt…\nRT @ianbremmer: sure, it’s the hottest summer europe has ever had in history \n\nbut look at the upside\n\nit’s one of the coolest summers euro…\nRT @twisteddoodles: Balanced news reporting https://t.co/O1iiItEQrs\n```\n:::\n:::\n\n::: {.cell hash='twittermining_cache/html/get-timeline1_a4896e9f706429e53db24f5a60a93ca9'}\n\n```{.r .cell-code}\ntweets <- get_timeline(user = d$screenname)\nsaveRDS(tweets, file = \"tweets/tweets01.rds\")\n```\n:::\n\n\n\n[Michael Kearney](https://rtweet-workshop.mikewk.com/#25) rät uns:\n\n>   PRO TIP #4: (for developer accounts only) Use `bearer_token()` to increase rate limit to 45,000 per fifteen minutes.\n\n### Retweets einlesen\n\n\n\n\n::: {.cell hash='twittermining_cache/html/get-retweets1_23bc2370081e4cbbe020f74dad5ae145'}\n\n```{.r .cell-code}\ntweets01_retweets <- \n  tweets$id_str %>% \n  head(3) %>% \n  map_dfr( ~ get_retweets(status_id = .x, retryonratelimit = TRUE))\n```\n:::\n\n\n\n\nDa die meisten Retweets aber nix sagen, sondern nur auf das einen Tweet wiederholen, ist das Sammeln der Retweets ziemlich langweilig.\n\n\nMöchte man `retry on rate limit` im Standard auf `TRUE` setzen, \nso kann man das über die Optionen von R tun.\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-10_ba6553beb078fdf34be8a1f64bcfb3a5'}\n\n```{.r .cell-code}\noptions(rtweet.retryonratelimit = TRUE)\n```\n:::\n\n\n\n\n### EPINetz Twitter Politicians 2021\n\n\n@konig_epinetz_2022 [Volltext hier](https://link.springer.com/article/10.1007/s11615-022-00405-7) haben einen Datensatz mit knapp 2500 Twitter Accounts deutscher Politiker zusammengestellt, zum Stand 2021.\n\n\nDer Datensatz kann über [Gesis](https://search.gesis.org/research_data/SDN-10.7802-2415?doi=10.7802/2415) bezogen werden.\n\nAuf der gleichen Seite findet sich auch eine [Dokumentation des Vorgehens](https://access.gesis.org/sharing/2415/3675).\n\nNachdem wir den Datensatz heruntergeladen haben, können wir ihn einlesen:\n\n\n::: {.cell hash='twittermining_cache/html/read-epinetz_17727ab1e3931b3e8a86d6d606bac8e3'}\n\n```{.r .cell-code}\npoliticians_path <- \"data/EPINetz_TwitterPoliticians_2021.RDs\"\npoliticians_twitter <- read_rds(politicians_path)\n\nhead(politicians_twitter)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   ID|official_name   |party     |region             |institution        |office          |user_id            |twitter_name       |twitter_handle |from       |until | year_of_birth|abgeordnetenwatch_id |gender |wikidata_id |\n|----:|:---------------|:---------|:------------------|:------------------|:---------------|:------------------|:------------------|:--------------|:----------|:-----|-------------:|:--------------------|:------|:-----------|\n|  535|Manja Schüle    |SPD       |Brandenburg        |State Parliament   |Parliamentarian |827090742162100224 |Manja Schüle       |ManjaSchuele   |2019-09-25 |NA    |          1976|146790               |female |Q40974942   |\n|  962|Petra Pau       |DIE LINKE |Federal            |Federal Parliament |Parliamentarian |1683845126         |Team PetraPau      |TeamPetraPau   |2017-10-24 |NA    |          1963|79091                |female |Q77195      |\n|  864|Dagmar Schmidt  |SPD       |Federal            |Federal Parliament |Parliamentarian |1377117206         |Team #dieschmidt   |TeamDieSchmidt |2017-10-24 |NA    |          1973|79036                |female |Q15433815   |\n| 2517|Bernd Buchholz  |FDP       |Schleswig-Holstein |State Parliament   |Parliamentarian |1073605033         |Bernd Buchholz     |BerndBuchholz  |2017-06-06 |NA    |          1961|121092               |male   |Q823715     |\n| 1378|Ingrid Remmers  |DIE LINKE |Federal            |Federal Parliament |Parliamentarian |551802475          |Ingrid Remmers MdB |ingrid_remmers |2017-10-24 |NA    |          1965|120775               |female |Q1652660    |\n| 1116|Reinhard Brandl |CSU       |Federal            |Federal Parliament |Parliamentarian |262730721          |Reinhard Brandl    |reinhardbrandl |2017-10-24 |NA    |          1977|79427                |male   |Q111160     |\n\n</div>\n:::\n:::\n\n\nDann lesen wir die Timelines (die Tweets) dieser Konten aus;\nin diesem Beispiel nur 10 Tweets pro Account:\n\n\n\n::: {.cell hash='twittermining_cache/html/get-timeline2_c19317f6e6c84f31a7371435606990ef'}\n\n```{.r .cell-code}\nepi_tweets <- get_timeline(user = head(politicians_twitter$twitter_name), n = 10)\nhead(epi_tweets)\n```\n:::\n\n\n\nNatürlich könnte man auch mehr als 10 Tweets pro Konto einsammeln, braucht nur seine Zeit.\n\n### Followers suchen\n\n\n\n\n\n::: {.cell hash='twittermining_cache/html/save-followers1_8440cf0ff100e8b6c4ba0f3a5288f018'}\n\n```{.r .cell-code}\nfollowers01 <-\n  d$screenname %>% \n map_dfr( ~ get_followers(user = .x, retryonratelimit = TRUE))\n```\n:::\n\n\n\nDa es dauern kann, Daten auszulesen (wir dürfen pro 15 Min. nur eine begrenzte Zahl an Information abrufen), kann es Sinn machen, die Daten lokal zu speichern.\n\n\n\n\n::: {.cell hash='twittermining_cache/html/save-flllowers01_c621552557c12fd9c15d6236d1c38dd9'}\n\n```{.r .cell-code}\nsaveRDS(followers01, file = \"tweets/followers01.rds\")\n```\n:::\n\n\n\nUnd ggf. wieder importieren:\n\n\n::: {.cell hash='twittermining_cache/html/read-flllowers0_e434ac6e5c413bef0b9cd61b31edc6e3'}\n\n```{.r .cell-code}\nfollowers01 <- read_rds(file = \"tweets/followers01.rds\")\n```\n:::\n\n\n\nWie viele unique Followers haben wir identifiziert?\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-11_e3737105ba3b70934d5871061caee643'}\n\n```{.r .cell-code}\nfollowers02 <- \n  followers01 %>% \n  distinct(from_id)\n```\n:::\n\n\n\nDie Screennames wären noch nützlich:\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-12_70b49c9e06ee0646e18d8d038558c6a1'}\n\n```{.r .cell-code}\nlookup_users(users = \"1690868335\")\n```\n:::\n\n\n\nDie Anzahl der Users, die man nachschauen kann, ist begrenzt auf 180 pro 15 Minuten.\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-13_1c401da06adde3795a921a4421fe2a20'}\n\n```{.r .cell-code}\nfollowers03 <-\n  followers02 %>% \n  mutate(screenname = \n           list(lookup_users(users = from_id, retryonratelimit = TRUE,verbose = TRUE)))\n```\n:::\n\n\n\n\n\nEntsprechend kann man wieder einlesen:\n\n\n\n\nDamit haben wir eine Liste an Followers, deren Tweets wir einlesen und analysieren können,\nz.B. nach Hate Speech.\n\nIm Gegensatz zu Followers heißen bei Twitter die Accounts, denen ei Nutzi folgt \"Friends\".\n\n\nLesen wir mal die Followers von `karl_lauterbach` ein:\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-14_e12232f57ca563f5264ef38f0b69294f'}\n\n```{.r .cell-code}\nkarl_followers <- get_followers(user = \"karl_lauterbach\", verbose = TRUE)\n```\n:::\n\n\n\nUm nicht jedes Mal aufs Neue die Daten herunterzuladen, \nbietet es sich an, die Daten lokal zu speichern:\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-15_29cf1e65c3665ca78b433f9dec55bba9'}\n\n```{.r .cell-code}\nwrite_rds(karl_followers, file = \"tweets/karl_followers.rds\",\n          compress = \"gz\")\n```\n:::\n\n\nEntsprechend kann man die Daten dann auch wieder einlesen:\n\n\n\n::: {.cell hash='twittermining_cache/html/read-karl-followers_9cd432fd30ce21acb26982f8db52bc72'}\n\n```{.r .cell-code}\nkarl_followers <- read_rds(file = \"tweets/karl_followers.rds\")\n```\n:::\n\n\n\n\n\n### Follower Tweets einlesen\n\n\n\n::: {.cell hash='twittermining_cache/html/get-timeline3_5b1fd4d4d5b0eb19275c292a011ae4b8'}\n\n```{.r .cell-code}\nfollowers_tweets <- get_timeline(user = head(followers01$from_id), n = 10)\n```\n:::\n\n\n\n\n\n\n\n\n\n## Tweets verarbeiten\n\n\n### Grundlegende Verarbeitung\n\nSind die Tweets eingelesen, kann man z.B. eine Sentimentanalyse, s. @sec-sentimentanalyse, durchführen, oder schlicht vergleichen, welche Personen welche Wörter häufig verwenden, s. @sec-woerterzaehlen.\n\n\n\n### Bot or not?\n\nEine interessante Methode, Tweets zu verarbeiten, bietet das R-Paket `tweetbotornot` von [M. Kearney](https://github.com/mkearney/tweetbotornot).\n\n\nAus der `Readme`: \n\n\n>   Due to Twitter’s REST API rate limits, users are limited to only 180 estimates per every 15 minutes. To maximize the number of estimates per 15 minutes (at the cost of being less accurate), use the fast = TRUE argument. This method uses only users-level data, which increases the maximum number of estimates per 15 minutes to 90,000! Due to losses in accuracy, this method should be used with caution!\n\n\n\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-16_85c7fcca5685b645132303c2e38b012c'}\n\n```{.r .cell-code}\nusers <- c(\"sauer_sebastian\")\nbot01 <-\n  tweetbotornot(users)\n```\n:::\n\n\n\n\n:::callout-important\nIch habe ein Fehlermeldung bekommen bei `tweetbotornot`.\nDa könnte ein technisches Problem in der Funktion vorliegen.\n:::\n\n\n\n\n\n\n## Cron Jobs\n\n\n\n### Was ist ein Cron Job?\n\n[Cron](https://en.wikipedia.org/wiki/Cron) ist ein Programm auf Unix-artigen Betriebssystemen, das Skripte zu eingestellten Zeiten (wiederholt) ausführt, das sind dann \"Cron Jobs\".\nAuf Windows gibt es aber analoge Funktionen.\nCron Jobs sind praktisch, da man nicht jedes Mal selber z.B. Tweets, die heute zu einem Thema getweetet wurden, herunterladen muss.\nDas wird dann vom Cron Job übernommen.\n\nIn R gibt es eine API zum Programm Cron mit dem Paket `{cronR}`, s. [Anleitung hier](https://github.com/bnosac/cronR).\n\nDas analoge R-Paket für Windows heißt [`{taskscheduleR}`](https://github.com/bnosac/taskscheduleR).\n\n\n\n### Beispiel für einen Cron Job\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-17_1f644f758065e743fe05500eb0359028'}\n\n```{.r .cell-code}\nlibrary(cronR)\n\nscrape_script <- cron_rscript(\"scrape_tweets.R\")\n\n# Cron Job hinzufügen:\ncron_add(command = scrape_script, \n         frequency = 'daily', \n         at = \"10AM\",\n         id = 'Hate Speech')  # Name des Cron Jobs\n\ncron_clear(ask = FALSE)  # Alle Cron Jobs löschen\ncron_ls()  # Liste aller Cron Jobs\n```\n:::\n\n\n\nIm obigen Beispiel wird das R-Skript `scrape_tweets.R` täglich um 10h ausgeführt.\n\n\n\n\nDer Inhalt von `scrape_tweets.R` könnte dann, in Grundzügen, so aussehen:\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-18_940ebc9129eda3dc8ac90c832c6a82da'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(rtweet)\nfollowers_lauterbach <-\n  followers01 %>% \n  filter(to_id == \"Karl_Lauterbach\")\n\nfollowers_lauterbach_tweets <- \n  get_timeline(user = followers_lauterbach$from_id[1:10], n = 10, retryonratelimit = TRUE, verbose = FALSE)\n\n\npath_output <- \"/Users/sebastiansaueruser/Google Drive/RRRing/Scrape-Tweets/tweets/\"\n\nwrite_csv(x = followers_lauterbach_tweets,\n          file = paste0(path_output, \"followers_lauterbach_tweets.csv\"),\n          append = TRUE)\n```\n:::\n\n\n\nWir schreiben nicht jedes Mal (jeden Tag) eine neue CSV-Datei, sondern wir hängen hier die neu ausgelesenen Daten an die Datei an.\n\nLeider ist es mit `rtweet` nicht möglich, ein Datum anzugeben, ab dem man Tweets auslesen möchte^[Mit dem R-Paket `twitteR`, das mittlerweile zugunsten von `rtweet` aufgegeben wurde, war das möglich. Allerdings zeigt ein [Blick in die Dokumentation der Twitter-API](https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline), das Datumsangaben offenbar gar nicht unterstützt werden.]\n\n\n## Datenbank an Tweets aufbauen\n\n\n### Stamm an bisherigen Tweets\n\nIn diesem Abschnitt kümmern wir uns in größerem Detail um das Aufbauen einer Tweets-Datenbank.\n\n\nDiese Pakete benötigen wir:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-19_104c2716625ad003d82f8cd358f8084f'}\n\n```{.r .cell-code}\nlibrary(rtweet)\nlibrary(tidyverse)\nlibrary(rio)  # R Data import/export\n```\n:::\n\n\n\nDann melden wir uns an:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-20_f6ff0198f1c5848115008fcf8407edd6'}\n\n```{.r .cell-code}\nsource(\"/Users/sebastiansaueruser/credentials/hate-speech-analysis-v01-twitter.R\")\nauth <- rtweet_app(bearer_token = Bearer_Token)\n```\n:::\n\n\n\nDann brauchen wir eine Liste an Twitterkonten,\ndie uns interessieren.\nIm Kontext von Hate Speech soll uns hier interessieren,\nwelche Tweets *an* deutsche Spitzenpolitikis^[zur Zeit, als diese Zeilen geschrieben wurden] gesendet werden.\nWir suchen also nach Tweets mit dem Text `@karl_lauterbach`,\num ein Beispiel für einen Spitzenpolitiker zu nennen, der vermutlich von Hate Speech in höherem Maße betroffen ist.\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-21_bec5ef98a653f40aeca114e3b964f53d'}\n\n```{.r .cell-code}\npoliticians_twitter_path <- \"/Users/sebastiansaueruser/github-repos/datascience-text/data/twitter-german-politicians.csv\"\n\npoliticians_twitter <- rio::import(file = politicians_twitter_path)\n```\n:::\n\n\n\n\nIn der Liste befinden sich 13 Politiker.\nEs macht die Sache vielleicht einfacher,\nwenn wir die Rate nicht überziehen.\nBleiben wir daher bei 1000 Tweets pro Politiki:\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-22_322bfbb9249fc6e3f39e4a152f3bcdf3'}\n\n```{.r .cell-code}\nn_tweets_per_politician <- 1e3\n```\n:::\n\n\n\nDie R-Syntax, die die Arbeit leistet,\nist in Funktionen ausgelagert,\nder Übersichtlichkeit halber.\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-23_1141eda1ab353e2715edc268f2cf28bd'}\n\n```{.r .cell-code}\nsource(\"funs/filter_recent_tweets.R\")\nsource(\"funs/download_recent_tweets.R\")\nsource(\"funs/add_tweets_to_tweet_db.R\")\n```\n:::\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-24_a704aac7cc57f61b40273735e2788781'}\n\n:::\n\n\nJetzt laden wir einfach die aktuellsten 1000 Tweets\npro Konto herunter,\ndaher brauchen wir keine Tweet-ID angeben,\ndie ein Mindest- oder Maximum-Datum (bzw. ID) für einen \nTweet angibt:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-25_6d3f44d527390799d0a2c920b5c046b2'}\n\n```{.r .cell-code}\ntweets_older <-\n  download_recent_tweets(screenname = politicians_twitter$screenname,\n                         max_or_since_id_str = NULL,\n                         n = n_tweets_per_politician,\n                         strip_columns = TRUE,\n                         reverse = TRUE)\n```\n:::\n\n\n\nWie weit in die Vergangenheit reicht unsere Tweet-Sammlung?\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-26_db06914b220015bb1fdcf3fb6701e84d'}\n\n```{.r .cell-code}\noldest_tweets <- filter_recent_tweets(tweets_older, max_or_min_id_str = is_min_id_str)\noldest_tweets\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|id_str              |screenname      |created_at          |is_min_id_str |is_max_id_str |\n|:-------------------|:---------------|:-------------------|:-------------|:-------------|\n|1590754620649115648 |Karl_Lauterbach |2022-11-10 18:13:51 |TRUE          |FALSE         |\n|1589837879693352960 |OlafScholz      |2022-11-08 05:31:02 |TRUE          |FALSE         |\n|1590485330742083585 |ABaerbock       |2022-11-10 00:23:47 |TRUE          |FALSE         |\n|1589983737621942272 |BMWK            |2022-11-08 15:10:38 |TRUE          |FALSE         |\n|1590646264433373184 |_FriedrichMerz  |2022-11-10 11:03:16 |TRUE          |FALSE         |\n|1588595577360875520 |Markus_Soeder   |2022-11-04 19:14:34 |TRUE          |FALSE         |\n|1590097264613425152 |cem_oezdemir    |2022-11-08 22:41:45 |TRUE          |FALSE         |\n|1588082031656898560 |Janine_Wissler  |2022-11-03 09:13:56 |TRUE          |FALSE         |\n|1588082031656898560 |schirdewan      |2022-11-03 09:13:56 |TRUE          |FALSE         |\n|1590628128791007233 |c_lindner       |2022-11-10 09:51:13 |TRUE          |FALSE         |\n|1589277825152208898 |MAStrackZi      |2022-11-06 16:25:35 |TRUE          |FALSE         |\n|1587964349993422848 |Tino_Chrupalla  |2022-11-03 01:26:18 |TRUE          |FALSE         |\n|1589696708447186945 |Alice_Weidel    |2022-11-07 20:10:05 |TRUE          |FALSE         |\n\n</div>\n:::\n:::\n\n\n\nWas sind die neuesten Tweets, die wir habven?\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-27_7f5ebd1b9542f10974156c5b453e5d42'}\n\n```{.r .cell-code}\nmost_recent_tweets <- filter_recent_tweets(oldest_tweets)\nmost_recent_tweets\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|id_str              |screenname      |created_at          |is_min_id_str |is_max_id_str |\n|:-------------------|:---------------|:-------------------|:-------------|:-------------|\n|1590754620649115648 |Karl_Lauterbach |2022-11-10 18:13:51 |TRUE          |TRUE          |\n|1589837879693352960 |OlafScholz      |2022-11-08 05:31:02 |TRUE          |TRUE          |\n|1590485330742083585 |ABaerbock       |2022-11-10 00:23:47 |TRUE          |TRUE          |\n|1589983737621942272 |BMWK            |2022-11-08 15:10:38 |TRUE          |TRUE          |\n|1590646264433373184 |_FriedrichMerz  |2022-11-10 11:03:16 |TRUE          |TRUE          |\n|1588595577360875520 |Markus_Soeder   |2022-11-04 19:14:34 |TRUE          |TRUE          |\n|1590097264613425152 |cem_oezdemir    |2022-11-08 22:41:45 |TRUE          |TRUE          |\n|1588082031656898560 |Janine_Wissler  |2022-11-03 09:13:56 |TRUE          |TRUE          |\n|1588082031656898560 |schirdewan      |2022-11-03 09:13:56 |TRUE          |TRUE          |\n|1590628128791007233 |c_lindner       |2022-11-10 09:51:13 |TRUE          |TRUE          |\n|1589277825152208898 |MAStrackZi      |2022-11-06 16:25:35 |TRUE          |TRUE          |\n|1587964349993422848 |Tino_Chrupalla  |2022-11-03 01:26:18 |TRUE          |TRUE          |\n|1589696708447186945 |Alice_Weidel    |2022-11-07 20:10:05 |TRUE          |TRUE          |\n\n</div>\n:::\n:::\n\n\n\nJetzt laden wir die *neueren* Tweets herunter,\nalso mit einer ID *größer* als die größte in unserer Sammlung:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-28_15bcd4e7982f9f73ad1c8b7298992a2e'}\n\n:::\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-29_b0523c73e7765ed1119e56c6f11d4318'}\n\n```{.r .cell-code}\ntweets_new <- \n  download_recent_tweets(screenname = most_recent_tweets$screenname,\n                         max_or_since_id_str = most_recent_tweets$id_str)\n\ntweets_new %>% \n  select(screenname, created_at, id_str) %>% \n  head()\n```\n:::\n\n\n\n\nJetzt - und jedes Mal, wenn wir Tweets herunterladen - \nfügen wir diese einer Datenbank (oder zumindest einer \"Gesamt-Tabelle\") hinzu:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-30_858c7ba27acfd4716482793190f7a9ee'}\n\n```{.r .cell-code}\ntweets_db <- add_tweets_to_tweets_db(tweets_new, tweets_older)\n\nnrow(tweets_db)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10969\n```\n:::\n:::\n\n\n\nSchließlich sollten wir nicht vergessen\ndiese in einer Datei zu speichern:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-31_a5d355099b6cc734a48f0dadc53e0059'}\n\n```{.r .cell-code}\nwrite_rds(tweets_db, file = \"~/datasets/Twitter/tweets-db-2022-11-11.rds\")\n```\n:::\n\n\n\n\n... ... So, einige Zeit ist vergangen.\nLaden wir noch ältere Tweets herunter und fügen Sie unserer Datenbank hinzu:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-32_48ca82150504d0969850fd8eaad164de'}\n\n```{.r .cell-code}\ntweets_older2 <-\n  download_recent_tweets(screenname = politicians_twitter$screenname,\n                         max_or_since_id_str = oldest_tweets$id_str,\n                         n = 1e3,\n                         strip_columns = TRUE,\n                         reverse = TRUE)\n```\n:::\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-33_0eea06b5aadbad4b6f6ff85ccc7a77aa'}\n\n:::\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-34_b58ad26a9de6c0f5421f63e34bf50773'}\n\n```{.r .cell-code}\ntweets_db <- add_tweets_to_tweets_db(tweets_new, tweets_older2)\n\nnrow(tweets_db)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10011\n```\n:::\n:::\n\n\n\nUnd wieder speichern wir die vergrößerte Datenbasis auf der Festplatte:\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-35_8d8086167e66a66eaee5c9cbe3fcf70d'}\n\n```{.r .cell-code}\nwrite_rds(tweets_db, file = \"~/datasets/Twitter/hate-speech-twitter.rds\")\n```\n:::\n\n\nLeider ist die Datenbasis nicht mehr deutlich gewachsen.\nEine plausible Ursache ist, dass Twitter den Zugriff auf alte Tweets einschränkt.\n\nAus der Hilfe von `search_tweets`:\n\n>   Returns Twitter statuses matching a user provided search query. ONLY RETURNS DATA FROM THE PAST 6-9 DAYS.\n\n\nMit Hilfe des [Academic Research Access](https://developer.twitter.com/en/products/twitter-api/academic-research) sind deutlich höhere Raten möglich.\n\n\n\n\n\n### Neue Tweets per Cron Job\n\n\nWie oben schon ausprobiert,\nlegen wir uns einen Cron Job an.\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-36_539b8e34ea400ed36a8b2ff3b7c501af'}\n\n```{.r .cell-code}\nlibrary(cronR)\n\nscrape_script <- cron_rscript(\"/Users/sebastiansaueruser/github-repos/datascience-text/funs/get_tweets_politicians.R\")\n\n# Cron Job hinzufügen:\ncron_add(command = scrape_script, \n         frequency = 'daily', \n         at = \"10AM\",\n         id = 'Hate Speech')  # Name des Cron Jobs\n```\n:::\n\n\n\nDas Skript `get_tweets_politicians.R` birgt die Schritte,\ndie wir in diesem Abschnitt ausprobiert haben, [hier](https://github.com/sebastiansauer/datascience-text/blob/main/specifics/get_tweets_politicians.R) liegt es.\nKurz gesagt sucht es nach neuen Tweets, die \nalso noch nicht in Ihrer \"Datenbank\" vorhanden sind,\nund lädt diese herunter.\nDabei werden maximal 1000 Tweets pro Konto (derer sind es 13)\nheruntergeladen.\n\nBei einem Cronjob sollten *absolute* Pfade angegeben werden, da der Cronjob *nicht* aus dem aktuellen Projekt-Repo startet.\n\nDie Ergebnisse eines Cronjob-Durchlaufs werden in einer Log-Datei abgelegt, und \nzwar in dem Ordner, in dem auch das Skript liegt, das \nim Rahmen des Cronjobs durchgeführt wird.\n\n\n\n\n:::callout-note\nSchauen Sie sich die Funktionen im Ordner `/funs` einmal in Ruhe an.\n[Hier](https://github.com/sebastiansauer/datascience-text/tree/main/funs) geht es zu dem Ordner im Github-Repo.\nEs ist alles keine Zauberei,\naber im Detail gibt es immer wieder Schwierigkeiten.\nAm meisten lernt man,\nwenn man selber Hand anlegt.\n:::\n\n\n\n\n\nMöchte man den Cron Job wieder löschen, so kann man das so tun:\n\n\n\n::: {.cell hash='twittermining_cache/html/unnamed-chunk-37_ff68e02e088d2601e946d59fcaec66a5'}\n\n```{.r .cell-code}\ncron_clear(ask = FALSE)  # Alle Cron Jobs löschen\ncron_ls()  # Liste aller Cron Jobs\n```\n:::\n\n\n\n\n\n## Aufgaben\n\n1. Überlegen Sie, wie Sie das Ausmaß an Hate Speech, dem deutsche Politikerinnen und Politiker konfrontiert sind, messen können.\n2. Argumentieren Sie die Vorteile und Nachteile Ihres Ansatzes. Außerdem, auf welches Ergebnis dieser Analyse sie gespannt sind bzw. wären.\n3. Überlegen Sie Korrelate, oder besser noch: (mögliche) Ursachen, des Hasses in den Tweets, gerichtet auf Polikter:innen. Sie können auch Gruppen von Ursachen bilden, etwas personengebundene Variablen der Politiker:innen (z.B. Alter? Geschlecht? Migrationshintergrund?).\n1. Erstellen Sie sich eine Liste an Personen, deren Tweets sich lohnen (könnten), auf Hate Speech hin analysiert zu werden. Laden Sie deren Tweets (ggf. in Auszügen) herunter.\n6. Das Skript zu `scrape_tweets.R` könnte man noch verbessern, in dem man jeden Tag nur die neuesten Tweets herunterlädt. Dazu kann man bei [get_timeline()](https://docs.ropensci.org/rtweet/reference/get_timeline.html) mit dem Argument `since_id` eine Untergrenze der ID festlegen, so dass nur neuere Tweets (d.h. mit größerem Wert bei ID) ausgelesen werden. Ändern Sie das Skript entsprechend, so dass nur neuerer Tweets gelesen werden.\n7. Erarbeiten Sie die Folien zu diesem [rtweet-Workshop](https://rtweet-workshop.mikewk.com/#1). Eine Menge guter Tipps!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}