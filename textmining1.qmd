# Grundlagen des Textmining



![Text als Datenbasis prädiktiver Modelle](img/text-mining-1476780_640.png){width=10%}
Bild von <a href="https://pixabay.com/de/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780">mcmurryjulie</a> auf <a href="https://pixabay.com/de//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780">Pixabay</a>



## Vorab


### Lernziele


- Die vorgestellten Techniken des Textminings mit R anwenden können



### Vorbereitung

- Lesen Sie in @smltar Kap. 2.



### Benötigte R-Pakete

```{r}
#| message: false
library(tidyverse)
library(tokenizers)
library(tidyverse)
library(tidytext)
library(hcandersenr)
library(SnowballC)
```



## Einfache Methoden des Textminings


Arbeiten Sie die folgenden grundlegenden Methoden des Textminigs durch.




### Tokenisierung

Erarbeiten Sie dieses Kapitel: @smltar, [Kap. 2](https://smltar.com/tokenization.html#tokenization)

Wie viele Zeilen hat das Märchen "The Fir tree" (in der englischen Fassung?)


```{r}
hcandersen_en %>% 
  filter(book == "The fir tree") %>% 
  nrow()
```


### Stopwörter entfernen


Erarbeiten Sie dieses Kapitel: s. @smltar, [Kap. 3](https://smltar.com/stopwords.html#stopwords)


### Stemming (Wortstamm finden)

Erarbeiten Sie dieses Kapitel: @smltar, [Kap. 4](https://smltar.com/stemming.html#stemming)


Vertiefende Hinweise zum UpSet plot finden Sie [hier](https://ieeexplore.ieee.org/document/6876017), @lex_upset_2014.


Für welche Sprachen gibt es Stemming im Paket `SnowballC`?

```{r}
library(SnowballC)
getStemLanguages()
```


Einfacher Test: Suchen wir den Wordstamm für das Wort "wissensdurstigen", wie in "die wissensdurstigen Studentis löcherten dis armis Professi"^[[Gender-i](https://gender-i.de/#mit-bestimmtem-artikel)].

```{r}
wordStem("wissensdurstigen", language = "german")
```


Werfen Sie mal einen Blick in das Handbuch von [SnowballC](https://cran.r-project.org/web/packages/SnowballC/SnowballC.pdf).




### Stringverarbeitung

Erarbeiten Sie dieses Kapitel: @r4ds, [Kap. 14](https://r4ds.had.co.nz/strings.html)






## Fallstudie


### Daten

Es finden sich mehrere Datensätze zum Thema Hate-Speech im öffentlichen Internet, eine Quelle ist [Hate Speech Data](https://ckan.hatespeechdata.com/), ein Repositorium, das mehrere Datensätze beinhaltet.



- [Kaggle Hate Speech and Offensive Language Dataset](https://www.kaggle.com/datasets/mrmorj/hate-speech-and-offensive-language-dataset?select=labeled_data.csv)
- [Bretschneider and Peters Prejudice on Facebook Dataset](https://ckan.hatespeechdata.com/dataset/bretschneider-and-peters-prejudice-on-facebook-dataset)
- [Daten zum Fachartikel"Large Scale Crowdsourcing and Characterization of Twitter Abusive Behavior"](https://github.com/ENCASEH2020/hatespeech-twitter/blob/master/hatespeech_labels.csv)


Twitterdaten dürfen nur in "dehydrierter" Form weitergegeben werden, so dass kein Rückschluss von ID zum Inhalt des Tweets möglich ist. 
Daher werden öffentlich nur die IDs der Tweets, als einzige Information zum Tweet, also ohne den eigentlichen Inhalt des Tweets, bereitgestellt.

Über die Twitter-API kann man sich, wie oben dargestellt, dann die Tweets wieder "rehydrieren", also wieder mit dem zugehörigen Tweet-Text (und sonstigen Infos des Tweets) zu versehen.


### Grundlegendes Text Mining


Wenden Sie die oben aufgeführten Techniken des grundlegenden Textminings auf einen der oben dargestellten Hate-Speech-Datensätze an.
Erstellen Sie ein (HTML-Dokument) mit Ihren Ergebnissen. 
Stellen Sie die Ergebnisse auf dem Github-Repo dieses Kurses ein.
Vergleichen Sie Ihre Lösung mit den Lösungen der anderen Kursmitglieder.

Wir nutzen noch nicht eigene Daten, die wir von Twitter ausgelesen haben, das heben wir uns für später auf.










