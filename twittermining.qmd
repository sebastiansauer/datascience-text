


![Text als Datenbasis prädiktiver Modelle](img/text-mining-1476780_640.png){width=10%}

Bild von <a href="https://pixabay.com/de/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780">mcmurryjulie</a> auf <a href="https://pixabay.com/de//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1476780">Pixabay</a>

# Twitter Mining



## Vorab


### Lernziele


- Twitterdaten via API von Twitter auslesen



### Vorbereitung

- Lesen Sie in @smltar Kap. 1.
- Legen Sie sich ein Konto bei [Github](https://github.com/) an.
- Legen Sie sich ein Konto bei [Twitter](twitter.com) an.
- Lesen Sie [diesen Artikel zur Anmeldung bei der Twitter API](https://docs.ropensci.org/rtweet/articles/auth.html)^[Sie können [hier](https://www.howtogeek.com/343877/what-is-an-api/) nachlesen, was eine API ist.]




### R-Pakete

```{r}
#| message: false
library(tidyverse)
library(rtweet)
```

![R-Paket {rtweet}](https://docs.ropensci.org/rtweet/logo.png){width=10%}


Einen Überblick über die Funktionen des Pakets (function reference) findet sich [hier](https://docs.ropensci.org/rtweet/reference/index.html).



## Anmelden bei Twitter


### Welche Accounts interessieren uns?


Hier ist eine (subjektive) Auswahl von deutschen Politikern,
die einen Startpunkt gibt zur Analyse von Art und Ausmaß von Hate Speech gerichtet an deutsche Politiker:innen.

```{r politicians-df-load}
#| message: false
d_path <- "data/twitter-german-politicians.csv"

d <- read_csv(d_path)
d
```



### Twitter App erstellen

[Tutorial](https://cran.r-project.org/web/packages/rtweet/vignettes/auth.html)


### Intro

Die Seite von [rtweet](https://docs.ropensci.org/rtweet/) gibt eine gute Starthilfe in die Benutzung des Pakets.


### Zugangsdaten


Zugangsdaten sollte man geschützt speichern, also z.B. nicht in einem geteilten Ordner.


```{r source-credentials-twitter}
source("/Users/sebastiansaueruser/credentials/hate-speech-analysis-v01-twitter.R")
```


Anmelden:

```{r oauth-twitter}
#| eval: false
auth <- rtweet_bot()
```



## Tweets einlesen


Zu beachten ist, dass es Limits gibt, wie viele Informationen (pro Zeiteinheit) man über die Twitter-API auslesen darf.
Informationen dazu findet man z.B. [hier](https://developer.twitter.com/en/docs/twitter-api/rate-limits) oder auch mit `rate_limit()`.





Ein gängiges Limit der Twitter-API sind 900 Anfragen (z.B. Tweets auslesen) pro 15 Minuten.

### Timeline einlesen einzelner Accounts


```{r get-timeline1}
#| eval: false
tweets <- get_timeline(user = d$screenname)
saveRDS(tweets, file = "tweets/tweets01.rds")
```



### Retweets einlesen


```{r}
options(rtweet.retryonratelimit = TRUE)
```


```{r get-retweets1}
#| eval: false

tweets01_retweets <- 
  tweets$id_str %>% 
  head(3) %>% 
  map_dfr( ~ get_retweets(status_id = .x, retryonratelimit = TRUE))
```



Da die meisten Retweets aber nix sagen, sondern nur auf das einen Tweet wiederholen, ist das Sammeln der Retweets ziemlich langweilig.


### EPINetz Twitter Politicians 2021


@konig_epinetz_2022 [Volltext hier](https://link.springer.com/article/10.1007/s11615-022-00405-7) haben einen Datensatz mit knapp 2500 Twitter Accounts deutscher Politiker zusammengestellt, zum Stand 2021.


Der Datensatz kann über [Gesis](https://search.gesis.org/research_data/SDN-10.7802-2415?doi=10.7802/2415) bezogen werden.

Auf der gleichen Seite findet sich auch eine [Dokumentation des Vorgehens](https://access.gesis.org/sharing/2415/3675).

Nachdem wir den Datensatz heruntergeladen haben, können wir ihn einlesen:

```{r read-epinetz}
politicians_path <- "data/EPINetz_TwitterPoliticians_2021.RDs"
politicians_twitter <- read_rds(politicians_path)

head(politicians_twitter)
```

Dann lesen wir die Timelines (die Tweets) dieser Konten aus;
in diesem Beispiel nur 10 Tweets pro Account:


```{r get-timeline2}
#| eval: false
epi_tweets <- get_timeline(user = head(politicians_twitter$twitter_name), n = 10)
head(epi_tweets)
```


Natürlich könnte man auch mehr als 10 Tweets pro Konto einsammeln, braucht nur seine Zeit.

### Followers suchen




```{r save-followers1}
#| eval: false
followers01 <-
  d$screenname %>% 
 map_dfr( ~ get_followers(user = .x, retryonratelimit = TRUE))

saveRDS(followers01, file = "tweets/followers01.rds")
```


Damit haben wir eine Liste an Followers, deren Tweets wir einlesen und analysieren können,
z.B. nach Hate Speech.


### Follower Tweets einlesen


```{r get-timeline3}
#| eval: false
followers_tweets <- get_timeline(user = head(followers01$from_id), n = 10)
```



## Cron Jobs



### Was ist ein Cron Job?

[Cron](https://en.wikipedia.org/wiki/Cron) ist ein Programm auf Unix-artigen Betriebssystemen, das Skripte zu eingestellten Zeiten (wiederholt) ausführt, das sind dann "Cron Jobs".
Auf Windows gibt es aber analoge Funktionen.
Cron Jobs sind praktisch, da man nicht jedes Mal selber z.B. Tweets, die heute zu einem Thema getweetet wurden, herunterladen muss.
Das wird dann vom Cron Job übernommen.

In R gibt es eine API zum Programm Cron mit dem Paket `{cronR}`, s. [Anleitung hier](https://github.com/bnosac/cronR).

Das analoge R-Paket für Windows heißt [`{taskscheduleR}`](https://github.com/bnosac/taskscheduleR).


### Beispiel für einen Cron Job


```{r}
#| eval: false
library(cronR)

scrape_script <- cron_rscript("scrape_tweets.R")

# Cron Job hinzufügen:
cron_add(command = scrape_script, 
         frequency = 'daily', 
         at = "10AM",
         id = 'Hate Speech')  # Name des Cron Jobs

cron_clear(ask = FALSE)  # Alle Cron Jobs löschen
cron_ls()  # Liste aller Cron Jobs
```


Im obigen Beispiel wird das R-Skript `scrape_tweets.R` täglich um 10h ausgeführt.




Der Inhalt von `scrape_tweets.R` könnte dann, in Grundzügen, so aussehen:


```{r}
#| eval: false
library(tidyverse)
library(lubridate)
library(rtweet)
followers_lauterbach <-
  followers01 %>% 
  filter(to_id == "Karl_Lauterbach")

followers_lauterbach_tweets <- 
  get_timeline(user = followers_lauterbach$from_id[1:10], n = 10, retryonratelimit = TRUE, verbose = FALSE)


path_output <- "/Users/sebastiansaueruser/Google Drive/RRRing/Scrape-Tweets/tweets/"

write_csv(x = followers_lauterbach_tweets,
          file = paste0(path_output, "followers_lauterbach_tweets.csv"),
          append = TRUE)

```


Wir schreiben nicht jedes Mal (jeden Tag) eine neue CSV-Datei, sondern wir hängen hier die neu ausgelesenen Daten an die Datei an.

Leider ist es mit `rtweet` nicht möglich, ein Datum anzugeben, ab dem man Tweets auslesen möchte^[Mit dem R-Paket `twitteR`, das mittlerweile zugunsten von `rtweet` aufgegeben wurde, war das möglich. Allerdings zeigt ein [Blick in die Dokumentation der Twitter-API](https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline), das Datumsangaben offenbar gar nicht unterstützt werden.]


## Aufgaben

1. Überlegen Sie, wie Sie das Ausmaß an Hate Speech, dem deutsche Politikerinnen und Politiker konfrontiert sind, messen können.
2. Argumentieren Sie die Vorteile und Nachteile Ihres Ansatzes. Außerdem, auf welches Ergebnis dieser Analyse sie gespannt sind bzw. wären.
3. Überlegen Sie Korrelate, oder besser noch: (mögliche) Ursachen, des Hasses in den Tweets, gerichtet auf Polikter:innen. Sie können auch Gruppen von Ursachen bilden, etwas personengebundene Variablen der Politiker:innen (z.B. Alter? Geschlecht? Migrationshintergrund?).
1. Erstellen Sie sich eine Liste an Personen, deren Tweets sich lohnen (könnten), auf Hate Speech hin analysiert zu werden. Laden Sie deren Tweets (ggf. in Auszügen) herunter.
6. Das Skript zu `scrape_tweets.R` könnte man noch verbessern, in dem man jeden Tag nur die neuesten Tweets herunterlädt. Dazu kann man bei [get_timeline()](https://docs.ropensci.org/rtweet/reference/get_timeline.html) mit dem Argument `since_id` eine Untergrenze der ID festlegen, so dass nur neuere Tweets (d.h. mit größerem Wert bei ID) ausgelesen werden. Ändern Sie das Skript entsprechend, so dass nur neuerer Tweets gelesen werden.
